{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Collector In JavaScript Introduction JavaScript is a vast and dynamic language, filled with both essential and less frequently used features. While official documentation provides a comprehensive guide, it can sometimes be overwhelming\u2014especially when you're searching for specific, practical knowledge. This book is not meant to replace the original references but rather to serve as a streamlined companion, offering a more structured and accessible approach. In this book, I\u2019ve focused on three key principles: Refining the Essentials \u2013 JavaScript contains a wide range of features, but as a developer, you only use a subset of them in most cases. This book distills the language down to its most valuable and frequently used components, helping you focus on what truly matters. Organized Categorization \u2013 After selecting the most important aspects of JavaScript, I\u2019ve grouped them into structured lists and sections based on their functionality. This makes it easier to navigate and quickly find what you need, much like the organization found in the String Object section. Concise and to the Point \u2013 Unlike traditional references that provide exhaustive details, this book follows a minimalist approach. Each topic is presented in a compact format that delivers exactly what you need, without unnecessary complexity. For example, functions in this book are explained in three simple sections: Definition \u2013 What the function does, including its purpose and the type of value it returns. Practical Example \u2013 A straightforward code snippet demonstrating its usage. Parameters Breakdown \u2013 A clear explanation of the inputs the function accepts. To ensure accuracy and reliability, this book is based on well-established resources, primarily the MDN Web Docs . MDN serves as one of the most trusted references for JavaScript, and I have used it extensively as a foundation for gathering and refining the information presented here. Additionally, this book was crafted with the assistance of artificial intelligence , not as a replacement for human expertise, but as a powerful tool to enhance organization, clarity, and efficiency. AI helped in structuring the content, summarizing key concepts, and refining explanations to ensure a smooth and accessible learning experience. However, every decision\u2014what to include, how to present it, and how to make it truly useful\u2014was guided by careful thought and human insight. By following this approach, this book ensures that you get the right information, in the right way, at the right time. Whether you're a beginner looking for clarity or an experienced developer seeking a quick reference, this book is designed to make your JavaScript journey smoother and more efficient. Let\u2019s dive in! What Does This Book Cover? Global Objects In JavaScript, built-in objects, also known as global objects, are predefined objects that are available for use throughout your code without the need for explicit declarations. These objects provide essential functionalities and utilities, such as working with numbers, strings, arrays, dates, and more. Some well-known global objects include Object , Array , Function , Math , Date , and JSON , among others. These objects are part of the global execution context, meaning they can be accessed directly in any part of your code, making them a foundational aspect of JavaScript programming. Understanding how to work with these built-in objects is key to writing efficient and effective JavaScript code. There are several built-in objects, and their usage can vary depending on the context. These objects cover a wide range of functionality in JavaScript and are central to working with both data and code execution. Object Array Function String Number Boolean Math Date RegExp Error Promise Set Map WeakSet WeakMap JSON Symbol Iterator Intl Console Expressions & operators Statements & declarations Functions Classes Regex Errors Mics What Does Not This Book Cover?","title":"The Collector In JavaScript"},{"location":"#the-collector-in-javascript","text":"","title":"The Collector In JavaScript"},{"location":"#introduction","text":"JavaScript is a vast and dynamic language, filled with both essential and less frequently used features. While official documentation provides a comprehensive guide, it can sometimes be overwhelming\u2014especially when you're searching for specific, practical knowledge. This book is not meant to replace the original references but rather to serve as a streamlined companion, offering a more structured and accessible approach. In this book, I\u2019ve focused on three key principles: Refining the Essentials \u2013 JavaScript contains a wide range of features, but as a developer, you only use a subset of them in most cases. This book distills the language down to its most valuable and frequently used components, helping you focus on what truly matters. Organized Categorization \u2013 After selecting the most important aspects of JavaScript, I\u2019ve grouped them into structured lists and sections based on their functionality. This makes it easier to navigate and quickly find what you need, much like the organization found in the String Object section. Concise and to the Point \u2013 Unlike traditional references that provide exhaustive details, this book follows a minimalist approach. Each topic is presented in a compact format that delivers exactly what you need, without unnecessary complexity. For example, functions in this book are explained in three simple sections: Definition \u2013 What the function does, including its purpose and the type of value it returns. Practical Example \u2013 A straightforward code snippet demonstrating its usage. Parameters Breakdown \u2013 A clear explanation of the inputs the function accepts. To ensure accuracy and reliability, this book is based on well-established resources, primarily the MDN Web Docs . MDN serves as one of the most trusted references for JavaScript, and I have used it extensively as a foundation for gathering and refining the information presented here. Additionally, this book was crafted with the assistance of artificial intelligence , not as a replacement for human expertise, but as a powerful tool to enhance organization, clarity, and efficiency. AI helped in structuring the content, summarizing key concepts, and refining explanations to ensure a smooth and accessible learning experience. However, every decision\u2014what to include, how to present it, and how to make it truly useful\u2014was guided by careful thought and human insight. By following this approach, this book ensures that you get the right information, in the right way, at the right time. Whether you're a beginner looking for clarity or an experienced developer seeking a quick reference, this book is designed to make your JavaScript journey smoother and more efficient. Let\u2019s dive in!","title":"Introduction"},{"location":"#what-does-this-book-cover","text":"","title":"What Does This Book Cover?"},{"location":"#global-objects","text":"In JavaScript, built-in objects, also known as global objects, are predefined objects that are available for use throughout your code without the need for explicit declarations. These objects provide essential functionalities and utilities, such as working with numbers, strings, arrays, dates, and more. Some well-known global objects include Object , Array , Function , Math , Date , and JSON , among others. These objects are part of the global execution context, meaning they can be accessed directly in any part of your code, making them a foundational aspect of JavaScript programming. Understanding how to work with these built-in objects is key to writing efficient and effective JavaScript code. There are several built-in objects, and their usage can vary depending on the context. These objects cover a wide range of functionality in JavaScript and are central to working with both data and code execution. Object Array Function String Number Boolean Math Date RegExp Error Promise Set Map WeakSet WeakMap JSON Symbol Iterator Intl Console","title":"Global Objects"},{"location":"#expressions-operators","text":"","title":"Expressions &amp; operators"},{"location":"#statements-declarations","text":"","title":"Statements &amp; declarations"},{"location":"#functions","text":"","title":"Functions"},{"location":"#classes","text":"","title":"Classes"},{"location":"#regex","text":"","title":"Regex"},{"location":"#errors","text":"","title":"Errors"},{"location":"#mics","text":"","title":"Mics"},{"location":"#what-does-not-this-book-cover","text":"","title":"What Does Not This Book Cover?"},{"location":"Global_Objects/Array/","text":"Array The Array object in JavaScript is a collection of ordered elements that can store multiple values in a single variable. Arrays are zero-indexed, meaning the first element has an index of 0 . Static Methods This category includes: Array.from(arrayLike, mapFn, thisArg) Array.fromAsync(arrayLike, mapFn, thisArg) Array.isArray(value) Array.of(elementN) Array.from(arrayLike, mapFn, thisArg) Creates a new array from an array-like or iterable object. An optional mapFn can modify elements during creation. Example: let str = \"hello\"; console.log(Array.from(str)); // [\"h\", \"e\", \"l\", \"l\", \"o\"] console.log(Array.from([1, 2, 3], (x) => x * 2)); // [2, 4, 6] console.log(Array.from(\"9528\", Number)); // [9, 5, 2, 8] Arguments: arrayLike : The array-like or iterable object to convert. mapFn (Optional): A function to apply to each element before adding it to the array. element : The current element. index (Optional): The index of the element. Defaults to 0 . array (Optional): The array being created. thisArg (Optional): Value to use as this inside mapFn . Array.fromAsync(arrayLike, mapFn, thisArg) Similar to Array.from , but supports async iterables and returns a Promise resolving to an array. Example: async function* asyncGen() { yield 1; yield 2; yield 3; } Array.fromAsync(asyncGen()).then(console.log); // [1, 2, 3] Arguments: arrayLike : The array-like or async iterable object to convert. mapFn (Optional): A function to apply to each element before adding it to the array. element : The current element. index (Optional): The index of the element. Defaults to 0 . array (Optional): The array being created. thisArg (Optional): Value to use as this inside mapFn . Array.isArray(value) Returns true if value is an array, otherwise false . Example: console.log(Array.isArray([1, 2, 3])); // true console.log(Array.isArray(\"hello\")); // false console.log(Array.isArray({})); // false Arguments: value : The value to check. Array.of(elementN) Creates a new array with the provided elements. Unlike Array , it avoids unintended behavior with a single numeric argument. Example: console.log(Array.of(3)); // [3] console.log(Array(3)); // [ <3 empty slots> ] console.log(Array.of(1, 2, 3)); // [1, 2, 3] Arguments: elementN : Elements to include in the new array. Instance Methods Accessing Elements Used to retrieve elements from an array based on their position or check for their existence. This category includes: at(index) indexOf(searchElement, fromIndex) lastIndexOf(searchElement, fromIndex) includes(searchElement, fromIndex) at(index) Returns the element at the specified index . Supports negative indexing. Example: let arr = [10, 20, 30]; console.log(arr.at(1)); // 20 console.log(arr.at(-1)); // 30 Arguments: index : The position of the element to retrieve. Supports negative values for accessing from the end. indexOf(searchElement, fromIndex) Returns the first index where searchElement is found, or -1 if not found. Example: let arr = [10, 20, 30, 20]; console.log(arr.indexOf(20)); // 1 console.log(arr.indexOf(50)); // -1 console.log(arr.indexOf(20, 2)); // 3 Arguments: searchElement : The value to locate in the array. fromIndex (Optional): The index to start the search from. Defaults to 0 . lastIndexOf(searchElement, fromIndex) Returns the last index where searchElement is found, or -1 if not found. Example: let arr = [10, 20, 30, 20]; console.log(arr.lastIndexOf(20)); // 3 console.log(arr.lastIndexOf(50)); // -1 console.log(arr.lastIndexOf(20, 2)); // 1 Arguments: searchElement : The value to locate in the array. fromIndex (Optional): The index to start searching backwards from. Defaults to array.length - 1 . includes(searchElement, fromIndex) Returns true if searchElement exists in the array, otherwise false . Example: let arr = [10, 20, 30]; console.log(arr.includes(20)); // true console.log(arr.includes(50)); // false console.log(arr.includes(20, 2)); // false Arguments: searchElement : The value to check for in the array. fromIndex (Optional): The index to start the search from. Defaults to 0 . Searching & Filtering Help find specific elements in an array, either by condition or direct match, and filter elements based on criteria. This category includes: filter(callbackFn, thisArg) find(callbackFn, thisArg) findIndex(callbackFn, thisArg) findLast(callbackFn, thisArg) findLastIndex(callbackFn, thisArg) filter(callbackFn, thisArg) Returns a new array with elements that satisfy callbackFn . Example: let arr = [10, 20, 30, 40]; let result = arr.filter((num) => num > 20); console.log(result); // [30, 40] Arguments: callbackFn : A function called for each element. Should return true to keep the element, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . find(callbackFn, thisArg) Returns the first element that satisfies callbackFn , or undefined if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.find((num) => num > 20); console.log(result); // 30 Arguments: callbackFn : A function called for each element. Should return true to return the element, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . findIndex(callbackFn, thisArg) Returns the index of the first element that satisfies callbackFn , or -1 if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.findIndex((num) => num > 20); console.log(result); // 2 Arguments: callbackFn : A function called for each element. Should return true to return the index, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . findLast(callbackFn, thisArg) Returns the last element that satisfies callbackFn , or undefined if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.findLast((num) => num > 20); console.log(result); // 40 Arguments: callbackFn : A function called for each element. Should return true to return the element, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . findLastIndex(callbackFn, thisArg) Returns the index of the last element that satisfies callbackFn , or -1 if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.findLastIndex((num) => num > 20); console.log(result); // 3 Arguments: callbackFn : A function called for each element. Should return true to return the index, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . Adding & Removing Elements Enable modifying the array by adding or removing elements at the start, middle, or end. This category includes: push(elementN) pop() shift() unshift(elementN) splice(start, deleteCount, ...itemN) toSpliced(start, deleteCount, ...itemN) push(elementN) Adds one or more elements to the end of the array and returns the new length. Example: let arr = [10, 20]; console.log(arr.push(30, 40)); // 4 console.log(arr); // [10, 20, 30, 40] Arguments: elementN : Elements to add at the end of the array. pop() Removes the last element from the array and returns it. Returns undefined if the array is empty. Example: let arr = [10, 20, 30]; console.log(arr.pop()); // 30 console.log(arr); // [10, 20] shift() Removes the first element from the array and returns it. Returns undefined if the array is empty. Example: let arr = [10, 20, 30]; console.log(arr.shift()); // 10 console.log(arr); // [20, 30] unshift(elementN) Adds one or more elements to the beginning of the array and returns the new length. Example: let arr = [20, 30]; console.log(arr.unshift(10)); // 3 console.log(arr); // [10, 20, 30] Arguments: elementN : Elements to add at the beginning of the array. splice(start, deleteCount, ...itemN) Modifies the array by removing or replacing elements and returns the removed elements. Example: let arr = [10, 20, 30, 40]; console.log(arr.splice(1, 2, 50, 60)); // [20, 30] console.log(arr); // [10, 50, 60, 40] Arguments: start : The index at which to start modifying the array. deleteCount (Optional): The number of elements to remove. Defaults to 0 . itemN (Optional): Elements to insert at start . toSpliced(start, deleteCount, ...itemN) Returns a new array with modifications without changing the original array. Example: let arr = [10, 20, 30, 40]; let result = arr.toSpliced(1, 2, 50, 60); console.log(result); // [10, 50, 60, 40] console.log(arr); // [10, 20, 30, 40] Arguments: start : The index at which to start modifying the array. deleteCount (Optional): The number of elements to remove. Defaults to 0 . itemN (Optional): Elements to insert at start . Conditions Used to determine if all or some elements meet a specified condition. This category includes: every(callbackFn, thisArg) some(callbackFn, thisArg) every(callbackFn, thisArg) Returns true if all elements satisfy callbackFn , otherwise returns false . Stops checking once it finds a false result. Example: let arr = [10, 20, 30]; console.log(arr.every((num) => num > 5)); // true console.log(arr.every((num) => num > 15)); // false Arguments: callbackFn : A function called for each element. Should return true to keep checking, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . some(callbackFn, thisArg) Returns true if at least one element satisfies callbackFn , otherwise returns false . Stops checking once it finds a true result. Example: let arr = [10, 20, 30]; console.log(arr.some((num) => num > 25)); // true console.log(arr.some((num) => num > 40)); // false Arguments: callbackFn : A function called for each element. Should return true to stop checking, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn . Sorting & Reversing Provide ways to order elements in ascending or descending order and reverse their sequence. This category includes: sort(compareFn) toSorted(compareFn) reverse() toReversed() sort(compareFn) Sorts the array in place and returns the sorted array. If compareFn is not provided, it sorts elements as strings in ascending order. Example: let arr = [30, 10, 20]; console.log(arr.sort()); // [10, 20, 30] (default behavior) console.log(arr.sort((a, b) => b - a)); // [30, 20, 10] (descending order) Arguments: compareFn (Optional): A function that defines the sorting logic. Should return a negative value for ascending order, positive for descending, and zero for equal values. toSorted(compareFn) Returns a new sorted array without modifying the original array. Example: let arr = [30, 10, 20]; let result = arr.toSorted((a, b) => a - b); console.log(result); // [10, 20, 30] console.log(arr); // [30, 10, 20] (unchanged) Arguments: compareFn (Optional): A function that defines the sorting logic. reverse() Reverses the elements of the array in place and returns the modified array. Example: let arr = [10, 20, 30]; console.log(arr.reverse()); // [30, 20, 10] console.log(arr); // [30, 20, 10] (modified) toReversed() Returns a new array with elements reversed without modifying the original array. Example: let arr = [10, 20, 30]; let result = arr.toReversed(); console.log(result); // [30, 20, 10] console.log(arr); // [10, 20, 30] (unchanged) Reducing Used for accumulating values from an array into a single result, like sums or averages. This category includes: reduce(callbackFn, initialValue) reduceRight(callbackFn, initialValue) reduce(callbackFn, initialValue) Applies callbackFn to each element, accumulating a single result from left to right. Example: let arr = [1, 2, 3, 4]; let sum = arr.reduce((acc, num) => acc + num, 0); console.log(sum); // 10 Arguments: callbackFn : A function executed on each element in the array, which takes four arguments: accumulator : The accumulated value returned by the last execution of callbackFn , or initialValue if provided. currentValue : The current element being processed in the array. index (Optional): The index of the current element being processed. array (Optional): The array reduce was called on. initialValue (Optional): The initial value to start the accumulation. If omitted, the first element of the array will be used as the initial value and the iteration will start from the second element. reduceRight(callbackFn, initialValue) Works like reduce but processes elements from right to left. Example: let arr = [\"a\", \"b\", \"c\"]; let result = arr.reduceRight((acc, char) => acc + char, \"\"); console.log(result); // \"cba\" Arguments: callbackFn : A function executed on each element in the array, which takes four arguments: accumulator : The accumulated value returned by the last execution of callbackFn , or initialValue if provided. currentValue : The current element being processed in the array. index (Optional): The index of the current element being processed. array (Optional): The array reduceRight was called on. initialValue (Optional): The initial value to start the accumulation. If omitted, the first element of the array will be used as the initial value and the iteration will start from the second element. Extracting & Slicing Provide ways to extract portions of an array without modifying the original. This category includes: slice(start, end) slice(start, end) Returns a new array containing elements from start up to (but not including) end , without modifying the original array. Example: let arr = [10, 20, 30, 40, 50]; console.log(arr.slice(1, 4)); // [20, 30, 40] console.log(arr.slice(2)); // [30, 40, 50] console.log(arr.slice(-3)); // [30, 40, 50] console.log(arr); // [10, 20, 30, 40, 50] (unchanged) Arguments: start : The index to begin slicing. Defaults to 0 . end (Optional): The index to stop slicing (not included). Defaults to the array length. Copying & Modifying Allow duplicating and modifying elements within an array without adding or removing anything. This category includes: copyWithin(target, start, end) fill(value, start, end) copyWithin(target, start, end) Copies a sequence of elements within the array to another position, overwriting existing values. Modifies the original array. Example: let arr = [10, 20, 30, 40, 50]; console.log(arr.copyWithin(1, 3)); // [10, 40, 50, 40, 50] console.log(arr); // [10, 40, 50, 40, 50] (modified) Arguments: target : The index where copied elements will be placed. start : The index to start copying from. end (Optional): The index to stop copying (not included). Defaults to the array length. fill(value, start, end) Replaces all elements in a specified range with value . Modifies the original array. Example: let arr = [1, 2, 3, 4, 5]; console.log(arr.fill(0, 1, 4)); // [1, 0, 0, 0, 5] console.log(arr); // [1, 0, 0, 0, 5] (modified) Arguments: value : The value to fill the array with. start (Optional): The index to begin filling. Defaults to 0 . end (Optional): The index to stop filling (not included). Defaults to the array length. Creation & Combination These functions help in creating new arrays by merging, flattening, or modifying existing ones. This category includes: concat(arrN) flat(depth) flatMap(callbackFn, thisArg) with(index, value) concat(arrN) Returns a new array by merging the original array with one or more provided arrays or values. Example: let arr = [1, 2, 3]; console.log(arr.concat([4, 5], 6)); // [1, 2, 3, 4, 5, 6] console.log(arr); // [1, 2, 3] (unchanged) Arguments: arrN : One or more arrays or values to merge with the original array. flat(depth) Returns a new array with sub-arrays flattened up to the specified depth . Example: let arr = [1, [2, [3, [4]]]]; console.log(arr.flat(2)); // [1, 2, 3, [4]] console.log(arr.flat()); // [1, 2, [3, [4]]] (default depth = 1) Arguments: depth (Optional): The level of nested arrays to flatten. Defaults to 1 . flatMap(callbackFn, thisArg) Maps each element using callbackFn and flattens the result into a new array. Example: let arr = [1, 2, 3]; console.log(arr.flatMap((num) => [num, num * 2])); // [1, 2, 2, 4, 3, 6] Arguments: callbackFn : A function called for each element. Should return an array or value, which takes three arguments: element : The current element being processed. index (Optional): The index of the current element. Defaults to 0 . array (Optional): The array that flatMap was called on. thisArg (Optional): Value to use as this inside callbackFn . with(index, value) Returns a new array with the element at index replaced by value , without modifying the original array. Example: let arr = [10, 20, 30]; console.log(arr.with(1, 99)); // [10, 99, 30] console.log(arr); // [10, 20, 30] (unchanged) Arguments: index : The position of the element to replace. value : The new value to insert at index . String Conversion Convert arrays into strings, either directly or with specific formatting. This category includes: toString() toLocaleString(locales, options) join(separator) toString() Returns a string representation of the array, where elements are separated by commas. Example: let arr = [10, 20, 30]; console.log(arr.toString()); // \"10,20,30\" toLocaleString(locales, options) Returns a localized string representation of the array, formatting elements based on the given locale and options. Example: let arr = [1000, new Date(\"2023-01-01\")]; console.log(arr.toLocaleString(\"en-US\")); // \"1,000, 1/1/2023, 12:00:00 AM\" console.log(arr.toLocaleString(\"de-DE\")); // \"1.000, 1.1.2023, 00:00:00\" Arguments: locales (Optional): A string or array of locale codes (e.g., \"en-US\" ). Defaults to the system's locale. options (Optional): An object specifying formatting options. join(separator) Returns a string where array elements are joined by separator . Example: let arr = [\"apple\", \"banana\", \"cherry\"]; console.log(arr.join(\" - \")); // \"apple - banana - cherry\" console.log(arr.join()); // \"apple,banana,cherry\" (default separator is \",\") Arguments: separator (Optional): The string to place between elements. Defaults to \",\" . Iteration & Transformation Return iterable objects that allow traversing an array\u2019s elements with key-value pairs. This category includes: map(callbackFn, thisArg) forEach(callbackFn, thisArg) entries() map(callbackFn, thisArg) Creates a new array by applying callbackFn to each element of the original array. This category includes: Example: let arr = [1, 2, 3]; console.log(arr.map((num) => num * 2)); // [2, 4, 6] console.log(arr); // [1, 2, 3] (unchanged) Arguments: callbackFn : A function called for each element, which takes three arguments: element : The current element being processed. index (Optional): The index of the current element. Defaults to 0 . array (Optional): The array that map was called on. thisArg (Optional): Value to use as this inside callbackFn . forEach(callbackFn, thisArg) Executes callbackFn for each array element but does not return a new array. Example: let arr = [\"a\", \"b\", \"c\"]; arr.forEach((char, index) => console.log(index, char)); // 0 \"a\" // 1 \"b\" // 2 \"c\" Arguments: callbackFn : A function called for each element, which takes three arguments: element : The current element being processed. index (Optional): The index of the current element. Defaults to 0 . array (Optional): The array that forEach was called on. thisArg (Optional): Value to use as this inside callbackFn . entries() Returns an iterator containing key-value pairs of the array, where the key is the index and the value is the element. Example: let arr = [\"x\", \"y\", \"z\"]; for (let [index, value] of arr.entries()) { console.log(index, value); } // 0 \"x\" // 1 \"y\" // 2 \"z\" Instance Properties length Represents the number of elements in the array. Can be used to get or set the array's length. Example (Getting the length): let arr = [10, 20, 30]; console.log(arr.length); // 3 Example (Setting the length): let arr = [1, 2, 3, 4, 5]; arr.length = 3; console.log(arr); // [1, 2, 3] (truncated) arr.length = 6; console.log(arr); // [1, 2, 3, <3 empty slots>]","title":"Array"},{"location":"Global_Objects/Array/#array","text":"The Array object in JavaScript is a collection of ordered elements that can store multiple values in a single variable. Arrays are zero-indexed, meaning the first element has an index of 0 .","title":"Array"},{"location":"Global_Objects/Array/#static-methods","text":"This category includes: Array.from(arrayLike, mapFn, thisArg) Array.fromAsync(arrayLike, mapFn, thisArg) Array.isArray(value) Array.of(elementN)","title":"Static Methods"},{"location":"Global_Objects/Array/#arrayfromarraylike-mapfn-thisarg","text":"Creates a new array from an array-like or iterable object. An optional mapFn can modify elements during creation. Example: let str = \"hello\"; console.log(Array.from(str)); // [\"h\", \"e\", \"l\", \"l\", \"o\"] console.log(Array.from([1, 2, 3], (x) => x * 2)); // [2, 4, 6] console.log(Array.from(\"9528\", Number)); // [9, 5, 2, 8] Arguments: arrayLike : The array-like or iterable object to convert. mapFn (Optional): A function to apply to each element before adding it to the array. element : The current element. index (Optional): The index of the element. Defaults to 0 . array (Optional): The array being created. thisArg (Optional): Value to use as this inside mapFn .","title":"Array.from(arrayLike, mapFn, thisArg)"},{"location":"Global_Objects/Array/#arrayfromasyncarraylike-mapfn-thisarg","text":"Similar to Array.from , but supports async iterables and returns a Promise resolving to an array. Example: async function* asyncGen() { yield 1; yield 2; yield 3; } Array.fromAsync(asyncGen()).then(console.log); // [1, 2, 3] Arguments: arrayLike : The array-like or async iterable object to convert. mapFn (Optional): A function to apply to each element before adding it to the array. element : The current element. index (Optional): The index of the element. Defaults to 0 . array (Optional): The array being created. thisArg (Optional): Value to use as this inside mapFn .","title":"Array.fromAsync(arrayLike, mapFn, thisArg)"},{"location":"Global_Objects/Array/#arrayisarrayvalue","text":"Returns true if value is an array, otherwise false . Example: console.log(Array.isArray([1, 2, 3])); // true console.log(Array.isArray(\"hello\")); // false console.log(Array.isArray({})); // false Arguments: value : The value to check.","title":"Array.isArray(value)"},{"location":"Global_Objects/Array/#arrayofelementn","text":"Creates a new array with the provided elements. Unlike Array , it avoids unintended behavior with a single numeric argument. Example: console.log(Array.of(3)); // [3] console.log(Array(3)); // [ <3 empty slots> ] console.log(Array.of(1, 2, 3)); // [1, 2, 3] Arguments: elementN : Elements to include in the new array.","title":"Array.of(elementN)"},{"location":"Global_Objects/Array/#instance-methods","text":"","title":"Instance Methods"},{"location":"Global_Objects/Array/#accessing-elements","text":"Used to retrieve elements from an array based on their position or check for their existence. This category includes: at(index) indexOf(searchElement, fromIndex) lastIndexOf(searchElement, fromIndex) includes(searchElement, fromIndex)","title":"Accessing Elements"},{"location":"Global_Objects/Array/#atindex","text":"Returns the element at the specified index . Supports negative indexing. Example: let arr = [10, 20, 30]; console.log(arr.at(1)); // 20 console.log(arr.at(-1)); // 30 Arguments: index : The position of the element to retrieve. Supports negative values for accessing from the end.","title":"at(index)"},{"location":"Global_Objects/Array/#indexofsearchelement-fromindex","text":"Returns the first index where searchElement is found, or -1 if not found. Example: let arr = [10, 20, 30, 20]; console.log(arr.indexOf(20)); // 1 console.log(arr.indexOf(50)); // -1 console.log(arr.indexOf(20, 2)); // 3 Arguments: searchElement : The value to locate in the array. fromIndex (Optional): The index to start the search from. Defaults to 0 .","title":"indexOf(searchElement, fromIndex)"},{"location":"Global_Objects/Array/#lastindexofsearchelement-fromindex","text":"Returns the last index where searchElement is found, or -1 if not found. Example: let arr = [10, 20, 30, 20]; console.log(arr.lastIndexOf(20)); // 3 console.log(arr.lastIndexOf(50)); // -1 console.log(arr.lastIndexOf(20, 2)); // 1 Arguments: searchElement : The value to locate in the array. fromIndex (Optional): The index to start searching backwards from. Defaults to array.length - 1 .","title":"lastIndexOf(searchElement, fromIndex)"},{"location":"Global_Objects/Array/#includessearchelement-fromindex","text":"Returns true if searchElement exists in the array, otherwise false . Example: let arr = [10, 20, 30]; console.log(arr.includes(20)); // true console.log(arr.includes(50)); // false console.log(arr.includes(20, 2)); // false Arguments: searchElement : The value to check for in the array. fromIndex (Optional): The index to start the search from. Defaults to 0 .","title":"includes(searchElement, fromIndex)"},{"location":"Global_Objects/Array/#searching-filtering","text":"Help find specific elements in an array, either by condition or direct match, and filter elements based on criteria. This category includes: filter(callbackFn, thisArg) find(callbackFn, thisArg) findIndex(callbackFn, thisArg) findLast(callbackFn, thisArg) findLastIndex(callbackFn, thisArg)","title":"Searching &amp; Filtering"},{"location":"Global_Objects/Array/#filtercallbackfn-thisarg","text":"Returns a new array with elements that satisfy callbackFn . Example: let arr = [10, 20, 30, 40]; let result = arr.filter((num) => num > 20); console.log(result); // [30, 40] Arguments: callbackFn : A function called for each element. Should return true to keep the element, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"filter(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#findcallbackfn-thisarg","text":"Returns the first element that satisfies callbackFn , or undefined if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.find((num) => num > 20); console.log(result); // 30 Arguments: callbackFn : A function called for each element. Should return true to return the element, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"find(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#findindexcallbackfn-thisarg","text":"Returns the index of the first element that satisfies callbackFn , or -1 if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.findIndex((num) => num > 20); console.log(result); // 2 Arguments: callbackFn : A function called for each element. Should return true to return the index, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"findIndex(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#findlastcallbackfn-thisarg","text":"Returns the last element that satisfies callbackFn , or undefined if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.findLast((num) => num > 20); console.log(result); // 40 Arguments: callbackFn : A function called for each element. Should return true to return the element, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"findLast(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#findlastindexcallbackfn-thisarg","text":"Returns the index of the last element that satisfies callbackFn , or -1 if none match. Example: let arr = [10, 20, 30, 40]; let result = arr.findLastIndex((num) => num > 20); console.log(result); // 3 Arguments: callbackFn : A function called for each element. Should return true to return the index, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"findLastIndex(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#adding-removing-elements","text":"Enable modifying the array by adding or removing elements at the start, middle, or end. This category includes: push(elementN) pop() shift() unshift(elementN) splice(start, deleteCount, ...itemN) toSpliced(start, deleteCount, ...itemN)","title":"Adding &amp; Removing Elements"},{"location":"Global_Objects/Array/#pushelementn","text":"Adds one or more elements to the end of the array and returns the new length. Example: let arr = [10, 20]; console.log(arr.push(30, 40)); // 4 console.log(arr); // [10, 20, 30, 40] Arguments: elementN : Elements to add at the end of the array.","title":"push(elementN)"},{"location":"Global_Objects/Array/#pop","text":"Removes the last element from the array and returns it. Returns undefined if the array is empty. Example: let arr = [10, 20, 30]; console.log(arr.pop()); // 30 console.log(arr); // [10, 20]","title":"pop()"},{"location":"Global_Objects/Array/#shift","text":"Removes the first element from the array and returns it. Returns undefined if the array is empty. Example: let arr = [10, 20, 30]; console.log(arr.shift()); // 10 console.log(arr); // [20, 30]","title":"shift()"},{"location":"Global_Objects/Array/#unshiftelementn","text":"Adds one or more elements to the beginning of the array and returns the new length. Example: let arr = [20, 30]; console.log(arr.unshift(10)); // 3 console.log(arr); // [10, 20, 30] Arguments: elementN : Elements to add at the beginning of the array.","title":"unshift(elementN)"},{"location":"Global_Objects/Array/#splicestart-deletecount-itemn","text":"Modifies the array by removing or replacing elements and returns the removed elements. Example: let arr = [10, 20, 30, 40]; console.log(arr.splice(1, 2, 50, 60)); // [20, 30] console.log(arr); // [10, 50, 60, 40] Arguments: start : The index at which to start modifying the array. deleteCount (Optional): The number of elements to remove. Defaults to 0 . itemN (Optional): Elements to insert at start .","title":"splice(start, deleteCount, ...itemN)"},{"location":"Global_Objects/Array/#tosplicedstart-deletecount-itemn","text":"Returns a new array with modifications without changing the original array. Example: let arr = [10, 20, 30, 40]; let result = arr.toSpliced(1, 2, 50, 60); console.log(result); // [10, 50, 60, 40] console.log(arr); // [10, 20, 30, 40] Arguments: start : The index at which to start modifying the array. deleteCount (Optional): The number of elements to remove. Defaults to 0 . itemN (Optional): Elements to insert at start .","title":"toSpliced(start, deleteCount, ...itemN)"},{"location":"Global_Objects/Array/#conditions","text":"Used to determine if all or some elements meet a specified condition. This category includes: every(callbackFn, thisArg) some(callbackFn, thisArg)","title":"Conditions"},{"location":"Global_Objects/Array/#everycallbackfn-thisarg","text":"Returns true if all elements satisfy callbackFn , otherwise returns false . Stops checking once it finds a false result. Example: let arr = [10, 20, 30]; console.log(arr.every((num) => num > 5)); // true console.log(arr.every((num) => num > 15)); // false Arguments: callbackFn : A function called for each element. Should return true to keep checking, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"every(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#somecallbackfn-thisarg","text":"Returns true if at least one element satisfies callbackFn , otherwise returns false . Stops checking once it finds a true result. Example: let arr = [10, 20, 30]; console.log(arr.some((num) => num > 25)); // true console.log(arr.some((num) => num > 40)); // false Arguments: callbackFn : A function called for each element. Should return true to stop checking, which takes three arguments: element : The current element being processed in the array. index (Optional): The index of the current element in the array. array (Optional): The array that filter was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"some(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#sorting-reversing","text":"Provide ways to order elements in ascending or descending order and reverse their sequence. This category includes: sort(compareFn) toSorted(compareFn) reverse() toReversed()","title":"Sorting &amp; Reversing"},{"location":"Global_Objects/Array/#sortcomparefn","text":"Sorts the array in place and returns the sorted array. If compareFn is not provided, it sorts elements as strings in ascending order. Example: let arr = [30, 10, 20]; console.log(arr.sort()); // [10, 20, 30] (default behavior) console.log(arr.sort((a, b) => b - a)); // [30, 20, 10] (descending order) Arguments: compareFn (Optional): A function that defines the sorting logic. Should return a negative value for ascending order, positive for descending, and zero for equal values.","title":"sort(compareFn)"},{"location":"Global_Objects/Array/#tosortedcomparefn","text":"Returns a new sorted array without modifying the original array. Example: let arr = [30, 10, 20]; let result = arr.toSorted((a, b) => a - b); console.log(result); // [10, 20, 30] console.log(arr); // [30, 10, 20] (unchanged) Arguments: compareFn (Optional): A function that defines the sorting logic.","title":"toSorted(compareFn)"},{"location":"Global_Objects/Array/#reverse","text":"Reverses the elements of the array in place and returns the modified array. Example: let arr = [10, 20, 30]; console.log(arr.reverse()); // [30, 20, 10] console.log(arr); // [30, 20, 10] (modified)","title":"reverse()"},{"location":"Global_Objects/Array/#toreversed","text":"Returns a new array with elements reversed without modifying the original array. Example: let arr = [10, 20, 30]; let result = arr.toReversed(); console.log(result); // [30, 20, 10] console.log(arr); // [10, 20, 30] (unchanged)","title":"toReversed()"},{"location":"Global_Objects/Array/#reducing","text":"Used for accumulating values from an array into a single result, like sums or averages. This category includes: reduce(callbackFn, initialValue) reduceRight(callbackFn, initialValue)","title":"Reducing"},{"location":"Global_Objects/Array/#reducecallbackfn-initialvalue","text":"Applies callbackFn to each element, accumulating a single result from left to right. Example: let arr = [1, 2, 3, 4]; let sum = arr.reduce((acc, num) => acc + num, 0); console.log(sum); // 10 Arguments: callbackFn : A function executed on each element in the array, which takes four arguments: accumulator : The accumulated value returned by the last execution of callbackFn , or initialValue if provided. currentValue : The current element being processed in the array. index (Optional): The index of the current element being processed. array (Optional): The array reduce was called on. initialValue (Optional): The initial value to start the accumulation. If omitted, the first element of the array will be used as the initial value and the iteration will start from the second element.","title":"reduce(callbackFn, initialValue)"},{"location":"Global_Objects/Array/#reducerightcallbackfn-initialvalue","text":"Works like reduce but processes elements from right to left. Example: let arr = [\"a\", \"b\", \"c\"]; let result = arr.reduceRight((acc, char) => acc + char, \"\"); console.log(result); // \"cba\" Arguments: callbackFn : A function executed on each element in the array, which takes four arguments: accumulator : The accumulated value returned by the last execution of callbackFn , or initialValue if provided. currentValue : The current element being processed in the array. index (Optional): The index of the current element being processed. array (Optional): The array reduceRight was called on. initialValue (Optional): The initial value to start the accumulation. If omitted, the first element of the array will be used as the initial value and the iteration will start from the second element.","title":"reduceRight(callbackFn, initialValue)"},{"location":"Global_Objects/Array/#extracting-slicing","text":"Provide ways to extract portions of an array without modifying the original. This category includes: slice(start, end)","title":"Extracting &amp; Slicing"},{"location":"Global_Objects/Array/#slicestart-end","text":"Returns a new array containing elements from start up to (but not including) end , without modifying the original array. Example: let arr = [10, 20, 30, 40, 50]; console.log(arr.slice(1, 4)); // [20, 30, 40] console.log(arr.slice(2)); // [30, 40, 50] console.log(arr.slice(-3)); // [30, 40, 50] console.log(arr); // [10, 20, 30, 40, 50] (unchanged) Arguments: start : The index to begin slicing. Defaults to 0 . end (Optional): The index to stop slicing (not included). Defaults to the array length.","title":"slice(start, end)"},{"location":"Global_Objects/Array/#copying-modifying","text":"Allow duplicating and modifying elements within an array without adding or removing anything. This category includes: copyWithin(target, start, end) fill(value, start, end)","title":"Copying &amp; Modifying"},{"location":"Global_Objects/Array/#copywithintarget-start-end","text":"Copies a sequence of elements within the array to another position, overwriting existing values. Modifies the original array. Example: let arr = [10, 20, 30, 40, 50]; console.log(arr.copyWithin(1, 3)); // [10, 40, 50, 40, 50] console.log(arr); // [10, 40, 50, 40, 50] (modified) Arguments: target : The index where copied elements will be placed. start : The index to start copying from. end (Optional): The index to stop copying (not included). Defaults to the array length.","title":"copyWithin(target, start, end)"},{"location":"Global_Objects/Array/#fillvalue-start-end","text":"Replaces all elements in a specified range with value . Modifies the original array. Example: let arr = [1, 2, 3, 4, 5]; console.log(arr.fill(0, 1, 4)); // [1, 0, 0, 0, 5] console.log(arr); // [1, 0, 0, 0, 5] (modified) Arguments: value : The value to fill the array with. start (Optional): The index to begin filling. Defaults to 0 . end (Optional): The index to stop filling (not included). Defaults to the array length.","title":"fill(value, start, end)"},{"location":"Global_Objects/Array/#creation-combination","text":"These functions help in creating new arrays by merging, flattening, or modifying existing ones. This category includes: concat(arrN) flat(depth) flatMap(callbackFn, thisArg) with(index, value)","title":"Creation &amp; Combination"},{"location":"Global_Objects/Array/#concatarrn","text":"Returns a new array by merging the original array with one or more provided arrays or values. Example: let arr = [1, 2, 3]; console.log(arr.concat([4, 5], 6)); // [1, 2, 3, 4, 5, 6] console.log(arr); // [1, 2, 3] (unchanged) Arguments: arrN : One or more arrays or values to merge with the original array.","title":"concat(arrN)"},{"location":"Global_Objects/Array/#flatdepth","text":"Returns a new array with sub-arrays flattened up to the specified depth . Example: let arr = [1, [2, [3, [4]]]]; console.log(arr.flat(2)); // [1, 2, 3, [4]] console.log(arr.flat()); // [1, 2, [3, [4]]] (default depth = 1) Arguments: depth (Optional): The level of nested arrays to flatten. Defaults to 1 .","title":"flat(depth)"},{"location":"Global_Objects/Array/#flatmapcallbackfn-thisarg","text":"Maps each element using callbackFn and flattens the result into a new array. Example: let arr = [1, 2, 3]; console.log(arr.flatMap((num) => [num, num * 2])); // [1, 2, 2, 4, 3, 6] Arguments: callbackFn : A function called for each element. Should return an array or value, which takes three arguments: element : The current element being processed. index (Optional): The index of the current element. Defaults to 0 . array (Optional): The array that flatMap was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"flatMap(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#withindex-value","text":"Returns a new array with the element at index replaced by value , without modifying the original array. Example: let arr = [10, 20, 30]; console.log(arr.with(1, 99)); // [10, 99, 30] console.log(arr); // [10, 20, 30] (unchanged) Arguments: index : The position of the element to replace. value : The new value to insert at index .","title":"with(index, value)"},{"location":"Global_Objects/Array/#string-conversion","text":"Convert arrays into strings, either directly or with specific formatting. This category includes: toString() toLocaleString(locales, options) join(separator)","title":"String Conversion"},{"location":"Global_Objects/Array/#tostring","text":"Returns a string representation of the array, where elements are separated by commas. Example: let arr = [10, 20, 30]; console.log(arr.toString()); // \"10,20,30\"","title":"toString()"},{"location":"Global_Objects/Array/#tolocalestringlocales-options","text":"Returns a localized string representation of the array, formatting elements based on the given locale and options. Example: let arr = [1000, new Date(\"2023-01-01\")]; console.log(arr.toLocaleString(\"en-US\")); // \"1,000, 1/1/2023, 12:00:00 AM\" console.log(arr.toLocaleString(\"de-DE\")); // \"1.000, 1.1.2023, 00:00:00\" Arguments: locales (Optional): A string or array of locale codes (e.g., \"en-US\" ). Defaults to the system's locale. options (Optional): An object specifying formatting options.","title":"toLocaleString(locales, options)"},{"location":"Global_Objects/Array/#joinseparator","text":"Returns a string where array elements are joined by separator . Example: let arr = [\"apple\", \"banana\", \"cherry\"]; console.log(arr.join(\" - \")); // \"apple - banana - cherry\" console.log(arr.join()); // \"apple,banana,cherry\" (default separator is \",\") Arguments: separator (Optional): The string to place between elements. Defaults to \",\" .","title":"join(separator)"},{"location":"Global_Objects/Array/#iteration-transformation","text":"Return iterable objects that allow traversing an array\u2019s elements with key-value pairs. This category includes: map(callbackFn, thisArg) forEach(callbackFn, thisArg) entries()","title":"Iteration &amp; Transformation"},{"location":"Global_Objects/Array/#mapcallbackfn-thisarg","text":"Creates a new array by applying callbackFn to each element of the original array. This category includes: Example: let arr = [1, 2, 3]; console.log(arr.map((num) => num * 2)); // [2, 4, 6] console.log(arr); // [1, 2, 3] (unchanged) Arguments: callbackFn : A function called for each element, which takes three arguments: element : The current element being processed. index (Optional): The index of the current element. Defaults to 0 . array (Optional): The array that map was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"map(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#foreachcallbackfn-thisarg","text":"Executes callbackFn for each array element but does not return a new array. Example: let arr = [\"a\", \"b\", \"c\"]; arr.forEach((char, index) => console.log(index, char)); // 0 \"a\" // 1 \"b\" // 2 \"c\" Arguments: callbackFn : A function called for each element, which takes three arguments: element : The current element being processed. index (Optional): The index of the current element. Defaults to 0 . array (Optional): The array that forEach was called on. thisArg (Optional): Value to use as this inside callbackFn .","title":"forEach(callbackFn, thisArg)"},{"location":"Global_Objects/Array/#entries","text":"Returns an iterator containing key-value pairs of the array, where the key is the index and the value is the element. Example: let arr = [\"x\", \"y\", \"z\"]; for (let [index, value] of arr.entries()) { console.log(index, value); } // 0 \"x\" // 1 \"y\" // 2 \"z\"","title":"entries()"},{"location":"Global_Objects/Array/#instance-properties","text":"","title":"Instance Properties"},{"location":"Global_Objects/Array/#length","text":"Represents the number of elements in the array. Can be used to get or set the array's length. Example (Getting the length): let arr = [10, 20, 30]; console.log(arr.length); // 3 Example (Setting the length): let arr = [1, 2, 3, 4, 5]; arr.length = 3; console.log(arr); // [1, 2, 3] (truncated) arr.length = 6; console.log(arr); // [1, 2, 3, <3 empty slots>]","title":"length"},{"location":"Global_Objects/Boolean/","text":"The Boolean object in JavaScript represents a logical value, either true or false . It serves as a wrapper for primitive boolean values and provides methods for converting other data types to boolean values.","title":"Boolean"},{"location":"Global_Objects/Console/","text":"The Console object in JavaScript provides methods for logging information to the browser's debugging console. It is commonly used for debugging, testing, and inspecting code during development.","title":"Console"},{"location":"Global_Objects/Date/","text":"The Date object in JavaScript represents a specific point in time. It provides methods for creating, formatting, and manipulating dates and times, including support for time zones and daylight saving time.","title":"Date"},{"location":"Global_Objects/Error/","text":"The Error object in JavaScript represents an error that occurs during the execution of code. It serves as the base constructor for various error types, such as SyntaxError , TypeError , and ReferenceError , and provides properties for debugging and error handling.","title":"Error"},{"location":"Global_Objects/Function/","text":"The Function object in JavaScript represents a callable block of code. It serves as the constructor for all functions and provides methods for creating, invoking, and inspecting functions, including support for closures and higher-order functions.","title":"Function"},{"location":"Global_Objects/Intl/","text":"The Intl object in JavaScript provides internationalization and localization support. It includes constructors for formatting dates, numbers, and strings according to language and region-specific conventions.","title":"Intl"},{"location":"Global_Objects/Iterator/","text":"The Iterator object in JavaScript represents a protocol for iterating over data structures. It provides a standardized way to access elements sequentially, enabling compatibility with constructs like for...of loops.","title":"Iterator"},{"location":"Global_Objects/JSON/","text":"The JSON object in JavaScript provides methods for parsing and serializing data in JavaScript Object Notation (JSON) format. It enables easy conversion between JSON strings and JavaScript objects.","title":"JSON"},{"location":"Global_Objects/Map/","text":"The Map object in JavaScript represents a collection of key-value pairs. It provides methods for adding, retrieving, and iterating over entries, with keys of any data type supported.","title":"Map"},{"location":"Global_Objects/Math/","text":"Math The Math object in JavaScript provides a collection of properties and methods for performing mathematical operations and calculations. It includes functions for trigonometry, logarithms, rounding, and generating random numbers. Static Properties Basic Arithmetic and Number Manipulation Functions that perform basic arithmetic operations or manipulate numbers in simple ways. This category includes: Math.abs(x) Math.ceil(x) Math.floor(x) Math.round(x) Math.trunc(x) Math.sign(x) Math.max(...args) Math.min(...args) Math.pow(x, y) Math.sqrt(x) Math.cbrt(x) Math.hypot(...args) Math.imul(x, y) Math.abs(x) Returns the absolute value of a number, which is its distance from zero on the number line. The return value is always non-negative. Example: console.log(Math.abs(-5)); // 5 console.log(Math.abs(3.14)); // 3.14 Arguments: x : A number for which the absolute value is calculated. Math.ceil(x) Returns the smallest integer greater than or equal to a number. Example: console.log(Math.ceil(1.2)); // 2 console.log(Math.ceil(-1.2)); // -1 Arguments: x : A number. Math.floor(x) Returns the largest integer less than or equal to a number. Example: console.log(Math.floor(1.8)); // 1 console.log(Math.floor(-1.8)); // -2 Arguments: x : A number. Math.round(x) Returns the value of a number rounded to the nearest integer. Example: console.log(Math.round(1.4)); // 1 console.log(Math.round(1.6)); // 2 Arguments: x : A number. Math.trunc(x) Returns the integer part of a number by removing any fractional digits. Example: console.log(Math.trunc(1.7)); // 1 console.log(Math.trunc(-1.7)); // -1 Arguments: x : A number. Math.sign(x) Returns the sign of a number: 1 for positive, -1 for negative, or 0 / -0 for zero. Example: console.log(Math.sign(5)); // 1 console.log(Math.sign(-5)); // -1 Arguments: x : A number. Math.max(...args) Returns the largest of zero or more numbers. Example: console.log(Math.max(1, 2, 3)); // 3 console.log(Math.max(-1, -2, -3)); // -1 Arguments: ...args : A list of numbers. Math.min(...args) Returns the smallest of zero or more numbers. Example: console.log(Math.min(1, 2, 3)); // 1 console.log(Math.min(-1, -2, -3)); // -3 Arguments: ...args : A list of numbers. Math.pow(x, y) Returns x raised to the power of y . Example: console.log(Math.pow(2, 3)); // 8 console.log(Math.pow(4, 0.5)); // 2 Arguments: x : The base number. y : The exponent. Math.sqrt(x) Returns the square root of a number. Example: console.log(Math.sqrt(4)); // 2 console.log(Math.sqrt(-1)); // NaN Arguments: x : A non-negative number. Math.cbrt(x) Returns the cube root of a number. Example: console.log(Math.cbrt(27)); // 3 console.log(Math.cbrt(-8)); // -2 Arguments: x : A number. Math.hypot(...args) Returns the square root of the sum of squares of its arguments. Example: console.log(Math.hypot(3, 4)); // 5 console.log(Math.hypot(1, 1, 1)); // 1.7320508075688772 Arguments: ...args : A list of numbers. Math.imul(x, y) Returns the result of a 32-bit integer multiplication of two numbers. Example: console.log(Math.imul(2, 4)); // 8 console.log(Math.imul(0xffffffff, 5)); // -5 Arguments: x : A number. y : A number. Trigonometric Functions Functions that perform trigonometric calculations, including inverse and hyperbolic variants. This category includes: Math.sin(x) Math.cos(x) Math.tan(x) Math.asin(x) Math.acos(x) Math.atan(x) Math.atan2(y, x) Math.sinh(x) Math.cosh(x) Math.tanh(x) Math.asinh(x) Math.acosh(x) Math.atanh(x) Math.sin(x) Returns the sine of an angle (in radians). Example: console.log(Math.sin(0)); // 0 console.log(Math.sin(Math.PI / 2)); // 1 Arguments: x : A number representing an angle in radians. Math.cos(x) Returns the cosine of an angle (in radians). Example: console.log(Math.cos(0)); // 1 console.log(Math.cos(Math.PI)); // -1 Arguments: x : A number representing an angle in radians. Math.tan(x) Returns the tangent of an angle (in radians). Example: console.log(Math.tan(0)); // 0 console.log(Math.tan(Math.PI / 4)); // 1 Arguments: x : A number representing an angle in radians. Math.asin(x) Returns the arcsine (in radians) of a number between -1 and 1. If the input is outside this range, it returns NaN . Example: console.log(Math.asin(0.5)); // 0.5235987755982989 console.log(Math.asin(2)); // NaN Arguments: x : A number between -1 and 1. Math.acos(x) Returns the arccosine (in radians) of a number between -1 and 1. If the input is outside this range, it returns NaN . Example: console.log(Math.acos(0.5)); // 1.0471975511965979 console.log(Math.acos(2)); // NaN Arguments: x : A number between -1 and 1. Math.atan(x) Returns the arctangent (in radians) of a number. Example: console.log(Math.atan(1)); // 0.7853981633974483 console.log(Math.atan(0)); // 0 Arguments: x : A number. Math.atan2(y, x) Returns the arctangent of the quotient of its arguments, representing the angle between the positive x-axis and the point (x, y). Example: console.log(Math.atan2(1, 1)); // 0.7853981633974483 console.log(Math.atan2(-1, -1)); // -2.356194490192345 Arguments: y : The y-coordinate. x : The x-coordinate. Math.sinh(x) Returns the hyperbolic sine of a number. Example: console.log(Math.sinh(0)); // 0 console.log(Math.sinh(1)); // 1.1752011936438014 Arguments: x : A number. Math.cosh(x) Returns the hyperbolic cosine of a number. Example: console.log(Math.cosh(0)); // 1 console.log(Math.cosh(1)); // 1.5430806348152437 Arguments: x : A number. Math.tanh(x) Returns the hyperbolic tangent of a number. Example: console.log(Math.tanh(0)); // 0 console.log(Math.tanh(1)); // 0.7615941559557649 Arguments: x : A number. Math.asinh(x) Returns the hyperbolic arcsine of a number. Example: console.log(Math.asinh(1)); // 0.881373587019543 console.log(Math.asinh(-1)); // -0.881373587019543 Arguments: x : A number. Math.acosh(x) Returns the hyperbolic arccosine of a number. The input must be greater than or equal to 1; otherwise, it returns NaN . Example: console.log(Math.acosh(1)); // 0 console.log(Math.acosh(0.5)); // NaN Arguments: x : A number greater than or equal to 1. Math.atanh(x) Returns the hyperbolic arctangent of a number between -1 and 1. If the input is outside this range, it returns NaN . Example: console.log(Math.atanh(0.5)); // 0.5493061443340548 console.log(Math.atanh(2)); // NaN Arguments: x : A number between -1 and 1. Logarithmic and Exponential Functions Functions that deal with logarithms, exponents, and related calculations. This category includes: Math.exp(x) Math.expm1(x) Math.log(x) Math.log10(x) Math.log1p(x) Math.log2(x) Math.exp(x) Returns e^x , where e is Euler's number (~2.718). Example: console.log(Math.exp(1)); // 2.718281828459045 console.log(Math.exp(0)); // 1 Arguments: x : A number. Math.expm1(x) Returns e^x - 1 , where e is Euler's number (~2.718). Example: console.log(Math.expm1(1)); // 1.718281828459045 console.log(Math.expm1(0)); // 0 Arguments: x : A number. Math.log(x) Returns the natural logarithm (base e ) of a number. Example: console.log(Math.log(1)); // 0 console.log(Math.log(Math.E)); // 1 Arguments: x : A number greater than 0. Math.log10(x) Returns the base-10 logarithm of a number. Example: console.log(Math.log10(100)); // 2 console.log(Math.log10(1)); // 0 Arguments: x : A number greater than 0. Math.log1p(x) Returns the natural logarithm of 1 + x . Example: console.log(Math.log1p(0)); // 0 console.log(Math.log1p(1)); // 0.6931471805599453 Arguments: x : A number greater than -1. Math.log2(x) Returns the base-2 logarithm of a number. Example: console.log(Math.log2(8)); // 3 console.log(Math.log2(1)); // 0 Arguments: x : A number greater than 0. Rounding and Precision Functions that handle rounding numbers or adjusting their precision. This category includes: Math.fround(x) Math.f16round(x) Math.fround(x) Returns the nearest 32-bit single-precision float representation of a number. Example: console.log(Math.fround(1.337)); // 1.3370000123977661 console.log(Math.fround(1.5)); // 1.5 Arguments: x : A number. Math.f16round(x) Rounds a number to the nearest 16-bit floating-point representation. Example: console.log(Math.f16round(1.337)); // 1.3369140625 console.log(Math.f16round(1.5)); // 1.5 Arguments: x : A number. Bitwise and Binary Operations Functions that operate on the binary representation of numbers. This category includes: Math.clz32(x) Math.clz32(x) Returns the number of leading zero bits in the 32-bit binary representation of a number. Example: console.log(Math.clz32(1)); // 31 console.log(Math.clz32(1000)); // 22 Arguments: x : A number. Random Number Generation Functions that generate random numbers. This category includes: Math.random() Math.random() Returns a pseudo-random number between 0 (inclusive) and 1 (exclusive). Example: console.log(Math.random()); // e.g., 0.123456789 This chapter provides a concise yet comprehensive overview of the Math object's functions, organized by functionality and formatted for quick reference. Static Properties Static properties that represent commonly used mathematical constants. This category includes: Math.E Math.LN10 Math.LN2 Math.LOG10E Math.LOG2E Math.PI Math.SQRT1_2 Math.SQRT2 Math.E Represents Euler's number, the base of natural logarithms, approximately equal to 2.718 . Example: console.log(Math.E); // 2.718281828459045 Math.LN10 Represents the natural logarithm of 10, approximately equal to 2.302 . Example: console.log(Math.LN10); // 2.302585092994046 Math.LN2 Represents the natural logarithm of 2, approximately equal to 0.693 . Example: console.log(Math.LN2); // 0.6931471805599453 Math.LOG10E Represents the base-10 logarithm of Euler's number, approximately equal to 0.434 . Example: console.log(Math.LOG10E); // 0.4342944819032518 Math.LOG2E Represents the base-2 logarithm of Euler's number, approximately equal to 1.442 . Example: console.log(Math.LOG2E); // 1.4426950408889634 Math.PI Represents the ratio of the circumference of a circle to its diameter, approximately equal to 3.14159 . Example: console.log(Math.PI); // 3.141592653589793 Math.SQRT1_2 Represents the square root of 1/2, approximately equal to 0.707 . Example: console.log(Math.SQRT1_2); // 0.7071067811865476 Math.SQRT2 Represents the square root of 2, approximately equal to 1.414 . Example: console.log(Math.SQRT2); // 1.4142135623730951","title":"Math"},{"location":"Global_Objects/Math/#math","text":"The Math object in JavaScript provides a collection of properties and methods for performing mathematical operations and calculations. It includes functions for trigonometry, logarithms, rounding, and generating random numbers.","title":"Math"},{"location":"Global_Objects/Math/#static-properties","text":"","title":"Static Properties"},{"location":"Global_Objects/Math/#basic-arithmetic-and-number-manipulation","text":"Functions that perform basic arithmetic operations or manipulate numbers in simple ways. This category includes: Math.abs(x) Math.ceil(x) Math.floor(x) Math.round(x) Math.trunc(x) Math.sign(x) Math.max(...args) Math.min(...args) Math.pow(x, y) Math.sqrt(x) Math.cbrt(x) Math.hypot(...args) Math.imul(x, y)","title":"Basic Arithmetic and Number Manipulation"},{"location":"Global_Objects/Math/#mathabsx","text":"Returns the absolute value of a number, which is its distance from zero on the number line. The return value is always non-negative. Example: console.log(Math.abs(-5)); // 5 console.log(Math.abs(3.14)); // 3.14 Arguments: x : A number for which the absolute value is calculated.","title":"Math.abs(x)"},{"location":"Global_Objects/Math/#mathceilx","text":"Returns the smallest integer greater than or equal to a number. Example: console.log(Math.ceil(1.2)); // 2 console.log(Math.ceil(-1.2)); // -1 Arguments: x : A number.","title":"Math.ceil(x)"},{"location":"Global_Objects/Math/#mathfloorx","text":"Returns the largest integer less than or equal to a number. Example: console.log(Math.floor(1.8)); // 1 console.log(Math.floor(-1.8)); // -2 Arguments: x : A number.","title":"Math.floor(x)"},{"location":"Global_Objects/Math/#mathroundx","text":"Returns the value of a number rounded to the nearest integer. Example: console.log(Math.round(1.4)); // 1 console.log(Math.round(1.6)); // 2 Arguments: x : A number.","title":"Math.round(x)"},{"location":"Global_Objects/Math/#mathtruncx","text":"Returns the integer part of a number by removing any fractional digits. Example: console.log(Math.trunc(1.7)); // 1 console.log(Math.trunc(-1.7)); // -1 Arguments: x : A number.","title":"Math.trunc(x)"},{"location":"Global_Objects/Math/#mathsignx","text":"Returns the sign of a number: 1 for positive, -1 for negative, or 0 / -0 for zero. Example: console.log(Math.sign(5)); // 1 console.log(Math.sign(-5)); // -1 Arguments: x : A number.","title":"Math.sign(x)"},{"location":"Global_Objects/Math/#mathmaxargs","text":"Returns the largest of zero or more numbers. Example: console.log(Math.max(1, 2, 3)); // 3 console.log(Math.max(-1, -2, -3)); // -1 Arguments: ...args : A list of numbers.","title":"Math.max(...args)"},{"location":"Global_Objects/Math/#mathminargs","text":"Returns the smallest of zero or more numbers. Example: console.log(Math.min(1, 2, 3)); // 1 console.log(Math.min(-1, -2, -3)); // -3 Arguments: ...args : A list of numbers.","title":"Math.min(...args)"},{"location":"Global_Objects/Math/#mathpowx-y","text":"Returns x raised to the power of y . Example: console.log(Math.pow(2, 3)); // 8 console.log(Math.pow(4, 0.5)); // 2 Arguments: x : The base number. y : The exponent.","title":"Math.pow(x, y)"},{"location":"Global_Objects/Math/#mathsqrtx","text":"Returns the square root of a number. Example: console.log(Math.sqrt(4)); // 2 console.log(Math.sqrt(-1)); // NaN Arguments: x : A non-negative number.","title":"Math.sqrt(x)"},{"location":"Global_Objects/Math/#mathcbrtx","text":"Returns the cube root of a number. Example: console.log(Math.cbrt(27)); // 3 console.log(Math.cbrt(-8)); // -2 Arguments: x : A number.","title":"Math.cbrt(x)"},{"location":"Global_Objects/Math/#mathhypotargs","text":"Returns the square root of the sum of squares of its arguments. Example: console.log(Math.hypot(3, 4)); // 5 console.log(Math.hypot(1, 1, 1)); // 1.7320508075688772 Arguments: ...args : A list of numbers.","title":"Math.hypot(...args)"},{"location":"Global_Objects/Math/#mathimulx-y","text":"Returns the result of a 32-bit integer multiplication of two numbers. Example: console.log(Math.imul(2, 4)); // 8 console.log(Math.imul(0xffffffff, 5)); // -5 Arguments: x : A number. y : A number.","title":"Math.imul(x, y)"},{"location":"Global_Objects/Math/#trigonometric-functions","text":"Functions that perform trigonometric calculations, including inverse and hyperbolic variants. This category includes: Math.sin(x) Math.cos(x) Math.tan(x) Math.asin(x) Math.acos(x) Math.atan(x) Math.atan2(y, x) Math.sinh(x) Math.cosh(x) Math.tanh(x) Math.asinh(x) Math.acosh(x) Math.atanh(x)","title":"Trigonometric Functions"},{"location":"Global_Objects/Math/#mathsinx","text":"Returns the sine of an angle (in radians). Example: console.log(Math.sin(0)); // 0 console.log(Math.sin(Math.PI / 2)); // 1 Arguments: x : A number representing an angle in radians.","title":"Math.sin(x)"},{"location":"Global_Objects/Math/#mathcosx","text":"Returns the cosine of an angle (in radians). Example: console.log(Math.cos(0)); // 1 console.log(Math.cos(Math.PI)); // -1 Arguments: x : A number representing an angle in radians.","title":"Math.cos(x)"},{"location":"Global_Objects/Math/#mathtanx","text":"Returns the tangent of an angle (in radians). Example: console.log(Math.tan(0)); // 0 console.log(Math.tan(Math.PI / 4)); // 1 Arguments: x : A number representing an angle in radians.","title":"Math.tan(x)"},{"location":"Global_Objects/Math/#mathasinx","text":"Returns the arcsine (in radians) of a number between -1 and 1. If the input is outside this range, it returns NaN . Example: console.log(Math.asin(0.5)); // 0.5235987755982989 console.log(Math.asin(2)); // NaN Arguments: x : A number between -1 and 1.","title":"Math.asin(x)"},{"location":"Global_Objects/Math/#mathacosx","text":"Returns the arccosine (in radians) of a number between -1 and 1. If the input is outside this range, it returns NaN . Example: console.log(Math.acos(0.5)); // 1.0471975511965979 console.log(Math.acos(2)); // NaN Arguments: x : A number between -1 and 1.","title":"Math.acos(x)"},{"location":"Global_Objects/Math/#mathatanx","text":"Returns the arctangent (in radians) of a number. Example: console.log(Math.atan(1)); // 0.7853981633974483 console.log(Math.atan(0)); // 0 Arguments: x : A number.","title":"Math.atan(x)"},{"location":"Global_Objects/Math/#mathatan2y-x","text":"Returns the arctangent of the quotient of its arguments, representing the angle between the positive x-axis and the point (x, y). Example: console.log(Math.atan2(1, 1)); // 0.7853981633974483 console.log(Math.atan2(-1, -1)); // -2.356194490192345 Arguments: y : The y-coordinate. x : The x-coordinate.","title":"Math.atan2(y, x)"},{"location":"Global_Objects/Math/#mathsinhx","text":"Returns the hyperbolic sine of a number. Example: console.log(Math.sinh(0)); // 0 console.log(Math.sinh(1)); // 1.1752011936438014 Arguments: x : A number.","title":"Math.sinh(x)"},{"location":"Global_Objects/Math/#mathcoshx","text":"Returns the hyperbolic cosine of a number. Example: console.log(Math.cosh(0)); // 1 console.log(Math.cosh(1)); // 1.5430806348152437 Arguments: x : A number.","title":"Math.cosh(x)"},{"location":"Global_Objects/Math/#mathtanhx","text":"Returns the hyperbolic tangent of a number. Example: console.log(Math.tanh(0)); // 0 console.log(Math.tanh(1)); // 0.7615941559557649 Arguments: x : A number.","title":"Math.tanh(x)"},{"location":"Global_Objects/Math/#mathasinhx","text":"Returns the hyperbolic arcsine of a number. Example: console.log(Math.asinh(1)); // 0.881373587019543 console.log(Math.asinh(-1)); // -0.881373587019543 Arguments: x : A number.","title":"Math.asinh(x)"},{"location":"Global_Objects/Math/#mathacoshx","text":"Returns the hyperbolic arccosine of a number. The input must be greater than or equal to 1; otherwise, it returns NaN . Example: console.log(Math.acosh(1)); // 0 console.log(Math.acosh(0.5)); // NaN Arguments: x : A number greater than or equal to 1.","title":"Math.acosh(x)"},{"location":"Global_Objects/Math/#mathatanhx","text":"Returns the hyperbolic arctangent of a number between -1 and 1. If the input is outside this range, it returns NaN . Example: console.log(Math.atanh(0.5)); // 0.5493061443340548 console.log(Math.atanh(2)); // NaN Arguments: x : A number between -1 and 1.","title":"Math.atanh(x)"},{"location":"Global_Objects/Math/#logarithmic-and-exponential-functions","text":"Functions that deal with logarithms, exponents, and related calculations. This category includes: Math.exp(x) Math.expm1(x) Math.log(x) Math.log10(x) Math.log1p(x) Math.log2(x)","title":"Logarithmic and Exponential Functions"},{"location":"Global_Objects/Math/#mathexpx","text":"Returns e^x , where e is Euler's number (~2.718). Example: console.log(Math.exp(1)); // 2.718281828459045 console.log(Math.exp(0)); // 1 Arguments: x : A number.","title":"Math.exp(x)"},{"location":"Global_Objects/Math/#mathexpm1x","text":"Returns e^x - 1 , where e is Euler's number (~2.718). Example: console.log(Math.expm1(1)); // 1.718281828459045 console.log(Math.expm1(0)); // 0 Arguments: x : A number.","title":"Math.expm1(x)"},{"location":"Global_Objects/Math/#mathlogx","text":"Returns the natural logarithm (base e ) of a number. Example: console.log(Math.log(1)); // 0 console.log(Math.log(Math.E)); // 1 Arguments: x : A number greater than 0.","title":"Math.log(x)"},{"location":"Global_Objects/Math/#mathlog10x","text":"Returns the base-10 logarithm of a number. Example: console.log(Math.log10(100)); // 2 console.log(Math.log10(1)); // 0 Arguments: x : A number greater than 0.","title":"Math.log10(x)"},{"location":"Global_Objects/Math/#mathlog1px","text":"Returns the natural logarithm of 1 + x . Example: console.log(Math.log1p(0)); // 0 console.log(Math.log1p(1)); // 0.6931471805599453 Arguments: x : A number greater than -1.","title":"Math.log1p(x)"},{"location":"Global_Objects/Math/#mathlog2x","text":"Returns the base-2 logarithm of a number. Example: console.log(Math.log2(8)); // 3 console.log(Math.log2(1)); // 0 Arguments: x : A number greater than 0.","title":"Math.log2(x)"},{"location":"Global_Objects/Math/#rounding-and-precision","text":"Functions that handle rounding numbers or adjusting their precision. This category includes: Math.fround(x) Math.f16round(x)","title":"Rounding and Precision"},{"location":"Global_Objects/Math/#mathfroundx","text":"Returns the nearest 32-bit single-precision float representation of a number. Example: console.log(Math.fround(1.337)); // 1.3370000123977661 console.log(Math.fround(1.5)); // 1.5 Arguments: x : A number.","title":"Math.fround(x)"},{"location":"Global_Objects/Math/#mathf16roundx","text":"Rounds a number to the nearest 16-bit floating-point representation. Example: console.log(Math.f16round(1.337)); // 1.3369140625 console.log(Math.f16round(1.5)); // 1.5 Arguments: x : A number.","title":"Math.f16round(x)"},{"location":"Global_Objects/Math/#bitwise-and-binary-operations","text":"Functions that operate on the binary representation of numbers. This category includes: Math.clz32(x)","title":"Bitwise and Binary Operations"},{"location":"Global_Objects/Math/#mathclz32x","text":"Returns the number of leading zero bits in the 32-bit binary representation of a number. Example: console.log(Math.clz32(1)); // 31 console.log(Math.clz32(1000)); // 22 Arguments: x : A number.","title":"Math.clz32(x)"},{"location":"Global_Objects/Math/#random-number-generation","text":"Functions that generate random numbers. This category includes: Math.random()","title":"Random Number Generation"},{"location":"Global_Objects/Math/#mathrandom","text":"Returns a pseudo-random number between 0 (inclusive) and 1 (exclusive). Example: console.log(Math.random()); // e.g., 0.123456789 This chapter provides a concise yet comprehensive overview of the Math object's functions, organized by functionality and formatted for quick reference.","title":"Math.random()"},{"location":"Global_Objects/Math/#static-properties_1","text":"Static properties that represent commonly used mathematical constants. This category includes: Math.E Math.LN10 Math.LN2 Math.LOG10E Math.LOG2E Math.PI Math.SQRT1_2 Math.SQRT2","title":"Static Properties"},{"location":"Global_Objects/Math/#mathe","text":"Represents Euler's number, the base of natural logarithms, approximately equal to 2.718 . Example: console.log(Math.E); // 2.718281828459045","title":"Math.E"},{"location":"Global_Objects/Math/#mathln10","text":"Represents the natural logarithm of 10, approximately equal to 2.302 . Example: console.log(Math.LN10); // 2.302585092994046","title":"Math.LN10"},{"location":"Global_Objects/Math/#mathln2","text":"Represents the natural logarithm of 2, approximately equal to 0.693 . Example: console.log(Math.LN2); // 0.6931471805599453","title":"Math.LN2"},{"location":"Global_Objects/Math/#mathlog10e","text":"Represents the base-10 logarithm of Euler's number, approximately equal to 0.434 . Example: console.log(Math.LOG10E); // 0.4342944819032518","title":"Math.LOG10E"},{"location":"Global_Objects/Math/#mathlog2e","text":"Represents the base-2 logarithm of Euler's number, approximately equal to 1.442 . Example: console.log(Math.LOG2E); // 1.4426950408889634","title":"Math.LOG2E"},{"location":"Global_Objects/Math/#mathpi","text":"Represents the ratio of the circumference of a circle to its diameter, approximately equal to 3.14159 . Example: console.log(Math.PI); // 3.141592653589793","title":"Math.PI"},{"location":"Global_Objects/Math/#mathsqrt1_2","text":"Represents the square root of 1/2, approximately equal to 0.707 . Example: console.log(Math.SQRT1_2); // 0.7071067811865476","title":"Math.SQRT1_2"},{"location":"Global_Objects/Math/#mathsqrt2","text":"Represents the square root of 2, approximately equal to 1.414 . Example: console.log(Math.SQRT2); // 1.4142135623730951","title":"Math.SQRT2"},{"location":"Global_Objects/Number/","text":"The Number object in JavaScript represents numeric values, both integers and floating-point numbers. It provides methods and properties for performing mathematical operations, converting numbers, and handling special numeric values like NaN and Infinity .","title":"Number"},{"location":"Global_Objects/Object/","text":"The Object object in JavaScript is the foundation of all object-oriented programming in the language. It provides methods for creating, manipulating, and inspecting objects, as well as serving as the base prototype for all other objects.","title":"Object"},{"location":"Global_Objects/Promise/","text":"The Promise object in JavaScript represents the eventual completion (or failure) of an asynchronous operation. It provides methods for chaining and handling asynchronous tasks, enabling cleaner and more manageable asynchronous code.","title":"Promise"},{"location":"Global_Objects/RegExp/","text":"The RegExp object in JavaScript represents a regular expression, a pattern used to match and manipulate text. It provides methods for testing, searching, and replacing text based on the specified pattern.","title":"RegExp"},{"location":"Global_Objects/Set/","text":"The Set object in JavaScript represents a collection of unique values. It provides methods for adding, removing, and iterating over elements, ensuring that no duplicates are allowed.","title":"Set"},{"location":"Global_Objects/String/","text":"String The String object in JavaScript represents a sequence of characters. It provides a variety of methods and properties for manipulating and inspecting strings. Static Methods This category includes: String.raw(templateString) String.fromCharCode(...numN) String.fromCodePoint(args) String.raw(templateString) Returns a raw string from a template literal, escaping any special characters (like backslashes) in the template literal as-is. Example: let str = String.raw`C:\\Path\\to\\net.conf`; console.log(str); // \"C:\\Path\\to\\net.conf\" Arguments: templateString : A template literal passed to the method, typically containing escape sequences like \\t or \\n . String.fromCharCode(...numN) Returns a string created from one or more Unicode values, where each number represents a UTF-16 code unit. Example: console.log(String.fromCharCode(65, 66, 67)); // \"ABC\" console.log(String.fromCharCode(128512)); // \"\ud83d\ude00\" Arguments: numN : One or more numbers representing UTF-16 code units. String.fromCodePoint(args) Returns a string created from one or more Unicode code points. This method supports characters outside the Basic Multilingual Plane (BMP), which may require surrogate pairs. Example: console.log(String.fromCodePoint(65, 66, 67)); // \"ABC\" console.log(String.fromCodePoint(128512)); // \"\ud83d\ude00\" console.log(String.fromCodePoint(0x1f600)); // \"\ud83d\ude00\" Arguments: args : One or more Unicode code points, which can be outside the BMP. Instance Methods Character Access and Manipulation These methods allow you to access specific characters or code points and manipulate characters. This category includes: at(index) charAt(index) charCodeAt(index) codePointAt(index) at(index) Returns the character at a given index, allowing negative indices for counting from the end. Example: let str = \"hello\"; console.log(str.at(1)); // \"e\" console.log(str.at(-1)); // \"o\" console.log(str.at(10)); // undefined Arguments: index : The position of the character to return, can be negative. charAt(index) Returns the character at a specified index. Unlike at() , it does not support negative indices. Example: let str = \"hello\"; console.log(str.charAt(1)); // \"e\" console.log(str.charAt(10)); // \"\" Arguments: index (Optional): The position of the character to return. Defaults to 0 . charCodeAt(index) Returns the UTF-16 code unit of the character at a given index. Example: let str = \"ABC\"; console.log(str.charCodeAt(0)); // 65 console.log(str.charCodeAt(1)); // 66 console.log(str.charCodeAt(10)); // NaN Arguments: index (Optional): The position of the character to retrieve its code. Defaults to 0 . codePointAt(index) Returns the Unicode code point of the character at a given index, supporting surrogate pairs. Example: let str = \"\ud835\udc9cBC\"; console.log(str.codePointAt(0)); // 119964 (\ud835\udc9c) console.log(str.codePointAt(1)); // 66 (B) Arguments: index (Optional): The position of the character to retrieve its code point. Defaults to 0 . Searching and Matching Methods for checking if a string contains certain substrings or matches patterns. This category includes: startsWith(searchString, endPosition) endsWith(searchString, endPosition) includes(searchString, position) search(regexp) indexOf(searchString, position) lastIndexOf(searchString, position) match(regexp) matchAll(regexp) startsWith(searchString, endPosition) Checks if a string starts with a given substring. Returns true if it does, otherwise returns false . Example: let str = \"Hello, world!\"; console.log(str.startsWith(\"Hello\")); // true console.log(str.startsWith(\"world\")); // false console.log(str.startsWith(\"Hello\", 1)); // false Arguments: searchString : The substring to check for at the start of the string. (Required) endPosition (Optional): The position in the string where the search should stop. Defaults to 0 . endsWith(searchString, endPosition) Checks if a string ends with a given substring. Returns true if it does, otherwise returns false . Example: let str = \"Hello, world!\"; console.log(str.endsWith(\"world!\")); // true console.log(str.endsWith(\"Hello\")); // false console.log(str.endsWith(\"world\", 12)); // true Arguments: searchString : The substring to check for at the end of the string. endPosition (Optional): The length of the string to consider. Defaults to the full length of the string. includes(searchString, position) Checks if a string contains a given substring. Returns true if it does, otherwise returns false . Example: let str = \"Hello, world!\"; console.log(str.includes(\"world\")); // true console.log(str.includes(\"Hello\", 1)); // false console.log(str.includes(\"o\", 5)); // true Arguments: searchString : The substring to search for. (Required) position (Optional): The index to start searching from. Defaults to 0 . search(regexp) Finds the first match of a regular expression in the string and returns the index of the match, or -1 if no match is found. Example: let str = \"some string\"; console.log(str.search(/str/)); // 5 console.log(str.search(\"ring\")); // 7 console.log(str.search(\"wiki\")); // -1 Arguments: regexp : The pattern to search for, either as a string or a regular expression. indexOf(searchString, position) Returns the index of the first occurrence of a substring, or -1 if not found. Example: let str = \"hello world\"; console.log(str.indexOf(\"o\")); // 4 console.log(str.indexOf(\"world\")); // 6 console.log(str.indexOf(\"o\", 5)); // 7 Arguments: searchString : The substring to search for. position (Optional): The index to start searching from. Defaults to 0 . lastIndexOf(searchString, position) Returns the index of the last occurrence of a substring, or -1 if not found. Example: let str = \"hello world\"; console.log(str.lastIndexOf(\"o\")); // 7 console.log(str.lastIndexOf(\"world\")); // 6 console.log(str.lastIndexOf(\"o\", 6)); // 4 Arguments: searchString : The substring to search for. position (Optional): The index to start searching backward from. Defaults to the string's full length. match(regexp) Finds matches for a regular expression and returns an array of matches or null if none are found. Example: let str = \"Hello 123, hello 456\"; console.log(str.match(/\\d+/g)); // [\"123\", \"456\"] console.log(str.match(/hello/i)); // [\"Hello\", index: 0, ...] console.log(str.match(/xyz/)); // null Arguments: regexp : A regular expression to match against the string. matchAll(regexp) Returns an iterator for all matches of a regular expression in a string. Example: let str = \"Hello 123, hello 456\"; let matches = str.matchAll(/\\d+/g); console.log([...matches]); // [[\"123\"], [\"456\"]] Arguments: regexp : A global regular expression ( /g flag is required). Extraction and Splitting Methods for extracting or splitting parts of the string. This category includes: slice(indexStart, indexEnd) substring(indexStart, indexEnd) split(separator, limit) slice(indexStart, indexEnd) Extracts a section of a string and returns a new string without modifying the original. Example: let str = \"Hello, world!\"; console.log(str.slice(7)); // \"world!\" console.log(str.slice(0, 5)); // \"Hello\" console.log(str.slice(-6)); // \"world!\" Arguments: indexStart : The start index of the extraction. indexEnd (Optional): The index before which to stop extraction. Defaults to the end of the string. substring(indexStart, indexEnd) Extracts a portion of a string and returns it as a new string, swapping indices if indexStart is greater than indexEnd . Example: let str = \"Hello, world!\"; console.log(str.substring(7)); // \"world!\" console.log(str.substring(0, 5)); // \"Hello\" console.log(str.substring(5, 0)); // \"Hello\" Arguments: indexStart : The start index of the extraction. indexEnd (Optional): The index before which to stop extraction. Defaults to the end of the string. split(separator, limit) Splits a string into an array of substrings based on a given separator. Example: let str = \"apple,banana,cherry\"; console.log(str.split(\",\")); // [\"apple\", \"banana\", \"cherry\"] console.log(str.split(\",\", 2)); // [\"apple\", \"banana\"] console.log(str.split(\"\")); // [\"a\", \"p\", \"p\", \"l\", \"e\", \",\", \"b\", \"a\", \"n\", \"a\", \"n\", \"a\", \",\", \"c\", \"h\", \"e\", \"r\", \"r\", \"y\"] Arguments: separator : A string or regular expression used to split the string. limit (Optional): The maximum number of splits to include in the array. Case Conversion Methods for converting string characters to different cases or locale-specific variations. This category includes: toLowerCase() toUpperCase() toLocaleUpperCase(locales) toLocaleLowerCase(locales) toLowerCase() Converts all characters in a string to lowercase and returns a new string. Example: let str = \"Hello World\"; console.log(str.toLowerCase()); // \"hello world\" toUpperCase() Converts all characters in a string to uppercase and returns a new string. Example: let str = \"Hello World\"; console.log(str.toUpperCase()); // \"HELLO WORLD\" toLocaleUpperCase(locales) Converts the string to uppercase using locale-specific rules and returns a new string. Example: let str = \"i\"; console.log(str.toLocaleUpperCase(\"tr\")); // \"\u0130\" console.log(str.toLocaleUpperCase(\"en\")); // \"I\" Arguments: locales (Optional): A string or array of locale identifiers affecting case conversion. Defaults to the environment\u2019s locale. toLocaleLowerCase(locales) Converts the string to lowercase using locale-specific rules and returns a new string. Example: let str = \"\u0130\"; console.log(str.toLocaleLowerCase(\"tr\")); // \"i\" console.log(str.toLocaleLowerCase(\"en\")); // \"i\" Arguments: locales (Optional): A string or array of locale identifiers affecting case conversion. Defaults to the environment\u2019s locale. Padding Methods for padding strings to a certain length by adding characters. This category includes: padStart(targetLength, padString) padEnd(targetLength, padString) padStart(targetLength, padString) Pads the current string with another string (or spaces by default) at the beginning until it reaches the specified length. Example: let str = \"42\"; console.log(str.padStart(5, \"0\")); // \"00042\" console.log(str.padStart(5)); // \" 42\" Arguments: targetLength : The length of the resulting string after padding. padString (Optional): The string used for padding. Defaults to a space. padEnd(targetLength, padString) Pads the current string with another string (or spaces by default) at the end until it reaches the specified length. Example: let str = \"42\"; console.log(str.padEnd(5, \"0\")); // \"42000\" console.log(str.padEnd(5)); // \"42 \" Arguments: targetLength : The length of the resulting string after padding. padString (Optional): The string used for padding. Defaults to a space. Replacement Methods for replace existing values in a string, with the new value you will provide. This category includes: replace(regex, replacement) replaceAll(regex, replacement) replace(regex, replacement) Replaces the first match of a given substring or regular expression with a new string. Example: let str = \"hello world\"; console.log(str.replace(\"world\", \"there\")); // \"hello there\" console.log(str.replace(/o/, \"O\")); // \"hellO world\" Arguments: regex : A string or regular expression to be replaced. replacement : The new string to replace the match with. replaceAll(regex, replacement) Replaces all occurrences of a given substring or regular expression with a new string. Example: let str = \"hello world, world!\"; console.log(str.replaceAll(\"world\", \"there\")); // \"hello there, there!\" console.log(str.replaceAll(/o/g, \"O\")); // \"hellO wOrld, wOrld!\" Arguments: regex : A string or regular expression to be replaced. replacement : The new string to replace the matches with. Concatenation This category includes: concat(strN) concat(strN) Concatenates one or more strings and returns a new string. Example: let str = \"Hello\"; console.log(str.concat(\" \", \"World\", \"!\")); // \"Hello World!\" Arguments: strN : One or more strings to concatenate. Whitespace Handling These methods focus on trimming and adjusting the spaces around or inside the string. This category includes: trim() trimStart() trimEnd() trim() Removes whitespace from both ends of a string and returns a new string. Example: let str = \" hello \"; console.log(str.trim()); // \"hello\" trimStart() Removes whitespace from the beginning of a string and returns a new string. Example: let str = \" hello \"; console.log(str.trimStart()); // \"hello \" An alternative to trimStart() do the same behavior is trimLeft() . trimEnd() Removes whitespace from the end of a string and returns a new string. Example: let str = \" hello \"; console.log(str.trimEnd()); // \" hello\" An alternative to trimEnd() do the same behavior is trimRight() . Repetition and Normalization Methods related to repeating strings or ensuring proper encoding. This category includes: repeat(count) isWellFormed() toWellFormed() normalize(form) repeat(count) Returns a new string containing the original string repeated count times. Example: let str = \"ha\"; console.log(str.repeat(3)); // \"hahaha\" console.log(str.repeat(0)); // \"\" Arguments: count : The number of times to repeat the string. Must be a non-negative integer. isWellFormed() Checks if the string is well-formed, meaning it doesn\u2019t contain lone surrogate code units. Returns true if well-formed, otherwise false . Example: let str1 = \"hello\"; let str2 = \"ab\\uD800\"; // Lone surrogate console.log(str1.isWellFormed()); // true console.log(str2.isWellFormed()); // false toWellFormed() Returns a well-formed version of the string by replacing lone surrogates with the Unicode replacement character \ufffd . Example: let str = \"ab\\uD800\"; // Lone surrogate console.log(str.toWellFormed()); // \"ab\ufffd\" normalize(form) Returns a Unicode-normalized form of the string. Example: let str = \"\\u1E9B\\u0323\"; // \"\u1e9b\u0323\" (\u1e9b + dot below) console.log(str.normalize(\"NFC\")); // \"\u1e69\" (single character) console.log(str.normalize(\"NFD\")); // \"\u1e9b\u0323\" Arguments: form (Optional): The normalization form, one of \"NFC\" , \"NFD\" , \"NFKC\" , or \"NFKD\" . Defaults to \"NFC\" . String Conversion and Representation Methods for converting the string to different formats or representations. This category includes: valueOf() toString() valueOf() Returns the primitive string value of a String object. Example: let strObj = new String(\"hello\"); console.log(strObj.valueOf()); // \"hello\" toString() Returns the string representation of a given string object or other data types like numbers and arrays. Example: let str = new String(\"hello\"); let arr = [1, 2, 3]; let num = 2025; console.log(str.toString()); // \"hello\" console.log(arr.toString()); // 1,2,3 console.log(num.toString()); // \"2025\" Instance Properties length Let you know how many characters in the string Example: let str = \"Hello\"; console.log(str.length); // 5 console.log(\"\ud83d\ude0a\".length); // 2 (because it's a surrogate pair)","title":"String"},{"location":"Global_Objects/String/#string","text":"The String object in JavaScript represents a sequence of characters. It provides a variety of methods and properties for manipulating and inspecting strings.","title":"String"},{"location":"Global_Objects/String/#static-methods","text":"This category includes: String.raw(templateString) String.fromCharCode(...numN) String.fromCodePoint(args)","title":"Static Methods"},{"location":"Global_Objects/String/#stringrawtemplatestring","text":"Returns a raw string from a template literal, escaping any special characters (like backslashes) in the template literal as-is. Example: let str = String.raw`C:\\Path\\to\\net.conf`; console.log(str); // \"C:\\Path\\to\\net.conf\" Arguments: templateString : A template literal passed to the method, typically containing escape sequences like \\t or \\n .","title":"String.raw(templateString)"},{"location":"Global_Objects/String/#stringfromcharcodenumn","text":"Returns a string created from one or more Unicode values, where each number represents a UTF-16 code unit. Example: console.log(String.fromCharCode(65, 66, 67)); // \"ABC\" console.log(String.fromCharCode(128512)); // \"\ud83d\ude00\" Arguments: numN : One or more numbers representing UTF-16 code units.","title":"String.fromCharCode(...numN)"},{"location":"Global_Objects/String/#stringfromcodepointargs","text":"Returns a string created from one or more Unicode code points. This method supports characters outside the Basic Multilingual Plane (BMP), which may require surrogate pairs. Example: console.log(String.fromCodePoint(65, 66, 67)); // \"ABC\" console.log(String.fromCodePoint(128512)); // \"\ud83d\ude00\" console.log(String.fromCodePoint(0x1f600)); // \"\ud83d\ude00\" Arguments: args : One or more Unicode code points, which can be outside the BMP.","title":"String.fromCodePoint(args)"},{"location":"Global_Objects/String/#instance-methods","text":"","title":"Instance Methods"},{"location":"Global_Objects/String/#character-access-and-manipulation","text":"These methods allow you to access specific characters or code points and manipulate characters. This category includes: at(index) charAt(index) charCodeAt(index) codePointAt(index)","title":"Character Access and Manipulation"},{"location":"Global_Objects/String/#atindex","text":"Returns the character at a given index, allowing negative indices for counting from the end. Example: let str = \"hello\"; console.log(str.at(1)); // \"e\" console.log(str.at(-1)); // \"o\" console.log(str.at(10)); // undefined Arguments: index : The position of the character to return, can be negative.","title":"at(index)"},{"location":"Global_Objects/String/#charatindex","text":"Returns the character at a specified index. Unlike at() , it does not support negative indices. Example: let str = \"hello\"; console.log(str.charAt(1)); // \"e\" console.log(str.charAt(10)); // \"\" Arguments: index (Optional): The position of the character to return. Defaults to 0 .","title":"charAt(index)"},{"location":"Global_Objects/String/#charcodeatindex","text":"Returns the UTF-16 code unit of the character at a given index. Example: let str = \"ABC\"; console.log(str.charCodeAt(0)); // 65 console.log(str.charCodeAt(1)); // 66 console.log(str.charCodeAt(10)); // NaN Arguments: index (Optional): The position of the character to retrieve its code. Defaults to 0 .","title":"charCodeAt(index)"},{"location":"Global_Objects/String/#codepointatindex","text":"Returns the Unicode code point of the character at a given index, supporting surrogate pairs. Example: let str = \"\ud835\udc9cBC\"; console.log(str.codePointAt(0)); // 119964 (\ud835\udc9c) console.log(str.codePointAt(1)); // 66 (B) Arguments: index (Optional): The position of the character to retrieve its code point. Defaults to 0 .","title":"codePointAt(index)"},{"location":"Global_Objects/String/#searching-and-matching","text":"Methods for checking if a string contains certain substrings or matches patterns. This category includes: startsWith(searchString, endPosition) endsWith(searchString, endPosition) includes(searchString, position) search(regexp) indexOf(searchString, position) lastIndexOf(searchString, position) match(regexp) matchAll(regexp)","title":"Searching and Matching"},{"location":"Global_Objects/String/#startswithsearchstring-endposition","text":"Checks if a string starts with a given substring. Returns true if it does, otherwise returns false . Example: let str = \"Hello, world!\"; console.log(str.startsWith(\"Hello\")); // true console.log(str.startsWith(\"world\")); // false console.log(str.startsWith(\"Hello\", 1)); // false Arguments: searchString : The substring to check for at the start of the string. (Required) endPosition (Optional): The position in the string where the search should stop. Defaults to 0 .","title":"startsWith(searchString, endPosition)"},{"location":"Global_Objects/String/#endswithsearchstring-endposition","text":"Checks if a string ends with a given substring. Returns true if it does, otherwise returns false . Example: let str = \"Hello, world!\"; console.log(str.endsWith(\"world!\")); // true console.log(str.endsWith(\"Hello\")); // false console.log(str.endsWith(\"world\", 12)); // true Arguments: searchString : The substring to check for at the end of the string. endPosition (Optional): The length of the string to consider. Defaults to the full length of the string.","title":"endsWith(searchString, endPosition)"},{"location":"Global_Objects/String/#includessearchstring-position","text":"Checks if a string contains a given substring. Returns true if it does, otherwise returns false . Example: let str = \"Hello, world!\"; console.log(str.includes(\"world\")); // true console.log(str.includes(\"Hello\", 1)); // false console.log(str.includes(\"o\", 5)); // true Arguments: searchString : The substring to search for. (Required) position (Optional): The index to start searching from. Defaults to 0 .","title":"includes(searchString, position)"},{"location":"Global_Objects/String/#searchregexp","text":"Finds the first match of a regular expression in the string and returns the index of the match, or -1 if no match is found. Example: let str = \"some string\"; console.log(str.search(/str/)); // 5 console.log(str.search(\"ring\")); // 7 console.log(str.search(\"wiki\")); // -1 Arguments: regexp : The pattern to search for, either as a string or a regular expression.","title":"search(regexp)"},{"location":"Global_Objects/String/#indexofsearchstring-position","text":"Returns the index of the first occurrence of a substring, or -1 if not found. Example: let str = \"hello world\"; console.log(str.indexOf(\"o\")); // 4 console.log(str.indexOf(\"world\")); // 6 console.log(str.indexOf(\"o\", 5)); // 7 Arguments: searchString : The substring to search for. position (Optional): The index to start searching from. Defaults to 0 .","title":"indexOf(searchString, position)"},{"location":"Global_Objects/String/#lastindexofsearchstring-position","text":"Returns the index of the last occurrence of a substring, or -1 if not found. Example: let str = \"hello world\"; console.log(str.lastIndexOf(\"o\")); // 7 console.log(str.lastIndexOf(\"world\")); // 6 console.log(str.lastIndexOf(\"o\", 6)); // 4 Arguments: searchString : The substring to search for. position (Optional): The index to start searching backward from. Defaults to the string's full length.","title":"lastIndexOf(searchString, position)"},{"location":"Global_Objects/String/#matchregexp","text":"Finds matches for a regular expression and returns an array of matches or null if none are found. Example: let str = \"Hello 123, hello 456\"; console.log(str.match(/\\d+/g)); // [\"123\", \"456\"] console.log(str.match(/hello/i)); // [\"Hello\", index: 0, ...] console.log(str.match(/xyz/)); // null Arguments: regexp : A regular expression to match against the string.","title":"match(regexp)"},{"location":"Global_Objects/String/#matchallregexp","text":"Returns an iterator for all matches of a regular expression in a string. Example: let str = \"Hello 123, hello 456\"; let matches = str.matchAll(/\\d+/g); console.log([...matches]); // [[\"123\"], [\"456\"]] Arguments: regexp : A global regular expression ( /g flag is required).","title":"matchAll(regexp)"},{"location":"Global_Objects/String/#extraction-and-splitting","text":"Methods for extracting or splitting parts of the string. This category includes: slice(indexStart, indexEnd) substring(indexStart, indexEnd) split(separator, limit)","title":"Extraction and Splitting"},{"location":"Global_Objects/String/#sliceindexstart-indexend","text":"Extracts a section of a string and returns a new string without modifying the original. Example: let str = \"Hello, world!\"; console.log(str.slice(7)); // \"world!\" console.log(str.slice(0, 5)); // \"Hello\" console.log(str.slice(-6)); // \"world!\" Arguments: indexStart : The start index of the extraction. indexEnd (Optional): The index before which to stop extraction. Defaults to the end of the string.","title":"slice(indexStart, indexEnd)"},{"location":"Global_Objects/String/#substringindexstart-indexend","text":"Extracts a portion of a string and returns it as a new string, swapping indices if indexStart is greater than indexEnd . Example: let str = \"Hello, world!\"; console.log(str.substring(7)); // \"world!\" console.log(str.substring(0, 5)); // \"Hello\" console.log(str.substring(5, 0)); // \"Hello\" Arguments: indexStart : The start index of the extraction. indexEnd (Optional): The index before which to stop extraction. Defaults to the end of the string.","title":"substring(indexStart, indexEnd)"},{"location":"Global_Objects/String/#splitseparator-limit","text":"Splits a string into an array of substrings based on a given separator. Example: let str = \"apple,banana,cherry\"; console.log(str.split(\",\")); // [\"apple\", \"banana\", \"cherry\"] console.log(str.split(\",\", 2)); // [\"apple\", \"banana\"] console.log(str.split(\"\")); // [\"a\", \"p\", \"p\", \"l\", \"e\", \",\", \"b\", \"a\", \"n\", \"a\", \"n\", \"a\", \",\", \"c\", \"h\", \"e\", \"r\", \"r\", \"y\"] Arguments: separator : A string or regular expression used to split the string. limit (Optional): The maximum number of splits to include in the array.","title":"split(separator, limit)"},{"location":"Global_Objects/String/#case-conversion","text":"Methods for converting string characters to different cases or locale-specific variations. This category includes: toLowerCase() toUpperCase() toLocaleUpperCase(locales) toLocaleLowerCase(locales)","title":"Case Conversion"},{"location":"Global_Objects/String/#tolowercase","text":"Converts all characters in a string to lowercase and returns a new string. Example: let str = \"Hello World\"; console.log(str.toLowerCase()); // \"hello world\"","title":"toLowerCase()"},{"location":"Global_Objects/String/#touppercase","text":"Converts all characters in a string to uppercase and returns a new string. Example: let str = \"Hello World\"; console.log(str.toUpperCase()); // \"HELLO WORLD\"","title":"toUpperCase()"},{"location":"Global_Objects/String/#tolocaleuppercaselocales","text":"Converts the string to uppercase using locale-specific rules and returns a new string. Example: let str = \"i\"; console.log(str.toLocaleUpperCase(\"tr\")); // \"\u0130\" console.log(str.toLocaleUpperCase(\"en\")); // \"I\" Arguments: locales (Optional): A string or array of locale identifiers affecting case conversion. Defaults to the environment\u2019s locale.","title":"toLocaleUpperCase(locales)"},{"location":"Global_Objects/String/#tolocalelowercaselocales","text":"Converts the string to lowercase using locale-specific rules and returns a new string. Example: let str = \"\u0130\"; console.log(str.toLocaleLowerCase(\"tr\")); // \"i\" console.log(str.toLocaleLowerCase(\"en\")); // \"i\" Arguments: locales (Optional): A string or array of locale identifiers affecting case conversion. Defaults to the environment\u2019s locale.","title":"toLocaleLowerCase(locales)"},{"location":"Global_Objects/String/#padding","text":"Methods for padding strings to a certain length by adding characters. This category includes: padStart(targetLength, padString) padEnd(targetLength, padString)","title":"Padding"},{"location":"Global_Objects/String/#padstarttargetlength-padstring","text":"Pads the current string with another string (or spaces by default) at the beginning until it reaches the specified length. Example: let str = \"42\"; console.log(str.padStart(5, \"0\")); // \"00042\" console.log(str.padStart(5)); // \" 42\" Arguments: targetLength : The length of the resulting string after padding. padString (Optional): The string used for padding. Defaults to a space.","title":"padStart(targetLength, padString)"},{"location":"Global_Objects/String/#padendtargetlength-padstring","text":"Pads the current string with another string (or spaces by default) at the end until it reaches the specified length. Example: let str = \"42\"; console.log(str.padEnd(5, \"0\")); // \"42000\" console.log(str.padEnd(5)); // \"42 \" Arguments: targetLength : The length of the resulting string after padding. padString (Optional): The string used for padding. Defaults to a space.","title":"padEnd(targetLength, padString)"},{"location":"Global_Objects/String/#replacement","text":"Methods for replace existing values in a string, with the new value you will provide. This category includes: replace(regex, replacement) replaceAll(regex, replacement)","title":"Replacement"},{"location":"Global_Objects/String/#replaceregex-replacement","text":"Replaces the first match of a given substring or regular expression with a new string. Example: let str = \"hello world\"; console.log(str.replace(\"world\", \"there\")); // \"hello there\" console.log(str.replace(/o/, \"O\")); // \"hellO world\" Arguments: regex : A string or regular expression to be replaced. replacement : The new string to replace the match with.","title":"replace(regex, replacement)"},{"location":"Global_Objects/String/#replaceallregex-replacement","text":"Replaces all occurrences of a given substring or regular expression with a new string. Example: let str = \"hello world, world!\"; console.log(str.replaceAll(\"world\", \"there\")); // \"hello there, there!\" console.log(str.replaceAll(/o/g, \"O\")); // \"hellO wOrld, wOrld!\" Arguments: regex : A string or regular expression to be replaced. replacement : The new string to replace the matches with.","title":"replaceAll(regex, replacement)"},{"location":"Global_Objects/String/#concatenation","text":"This category includes: concat(strN)","title":"Concatenation"},{"location":"Global_Objects/String/#concatstrn","text":"Concatenates one or more strings and returns a new string. Example: let str = \"Hello\"; console.log(str.concat(\" \", \"World\", \"!\")); // \"Hello World!\" Arguments: strN : One or more strings to concatenate.","title":"concat(strN)"},{"location":"Global_Objects/String/#whitespace-handling","text":"These methods focus on trimming and adjusting the spaces around or inside the string. This category includes: trim() trimStart() trimEnd()","title":"Whitespace Handling"},{"location":"Global_Objects/String/#trim","text":"Removes whitespace from both ends of a string and returns a new string. Example: let str = \" hello \"; console.log(str.trim()); // \"hello\"","title":"trim()"},{"location":"Global_Objects/String/#trimstart","text":"Removes whitespace from the beginning of a string and returns a new string. Example: let str = \" hello \"; console.log(str.trimStart()); // \"hello \" An alternative to trimStart() do the same behavior is trimLeft() .","title":"trimStart()"},{"location":"Global_Objects/String/#trimend","text":"Removes whitespace from the end of a string and returns a new string. Example: let str = \" hello \"; console.log(str.trimEnd()); // \" hello\" An alternative to trimEnd() do the same behavior is trimRight() .","title":"trimEnd()"},{"location":"Global_Objects/String/#repetition-and-normalization","text":"Methods related to repeating strings or ensuring proper encoding. This category includes: repeat(count) isWellFormed() toWellFormed() normalize(form)","title":"Repetition and Normalization"},{"location":"Global_Objects/String/#repeatcount","text":"Returns a new string containing the original string repeated count times. Example: let str = \"ha\"; console.log(str.repeat(3)); // \"hahaha\" console.log(str.repeat(0)); // \"\" Arguments: count : The number of times to repeat the string. Must be a non-negative integer.","title":"repeat(count)"},{"location":"Global_Objects/String/#iswellformed","text":"Checks if the string is well-formed, meaning it doesn\u2019t contain lone surrogate code units. Returns true if well-formed, otherwise false . Example: let str1 = \"hello\"; let str2 = \"ab\\uD800\"; // Lone surrogate console.log(str1.isWellFormed()); // true console.log(str2.isWellFormed()); // false","title":"isWellFormed()"},{"location":"Global_Objects/String/#towellformed","text":"Returns a well-formed version of the string by replacing lone surrogates with the Unicode replacement character \ufffd . Example: let str = \"ab\\uD800\"; // Lone surrogate console.log(str.toWellFormed()); // \"ab\ufffd\"","title":"toWellFormed()"},{"location":"Global_Objects/String/#normalizeform","text":"Returns a Unicode-normalized form of the string. Example: let str = \"\\u1E9B\\u0323\"; // \"\u1e9b\u0323\" (\u1e9b + dot below) console.log(str.normalize(\"NFC\")); // \"\u1e69\" (single character) console.log(str.normalize(\"NFD\")); // \"\u1e9b\u0323\" Arguments: form (Optional): The normalization form, one of \"NFC\" , \"NFD\" , \"NFKC\" , or \"NFKD\" . Defaults to \"NFC\" .","title":"normalize(form)"},{"location":"Global_Objects/String/#string-conversion-and-representation","text":"Methods for converting the string to different formats or representations. This category includes: valueOf() toString()","title":"String Conversion and Representation"},{"location":"Global_Objects/String/#valueof","text":"Returns the primitive string value of a String object. Example: let strObj = new String(\"hello\"); console.log(strObj.valueOf()); // \"hello\"","title":"valueOf()"},{"location":"Global_Objects/String/#tostring","text":"Returns the string representation of a given string object or other data types like numbers and arrays. Example: let str = new String(\"hello\"); let arr = [1, 2, 3]; let num = 2025; console.log(str.toString()); // \"hello\" console.log(arr.toString()); // 1,2,3 console.log(num.toString()); // \"2025\"","title":"toString()"},{"location":"Global_Objects/String/#instance-properties","text":"","title":"Instance Properties"},{"location":"Global_Objects/String/#length","text":"Let you know how many characters in the string Example: let str = \"Hello\"; console.log(str.length); // 5 console.log(\"\ud83d\ude0a\".length); // 2 (because it's a surrogate pair)","title":"length"},{"location":"Global_Objects/Symbol/","text":"The Symbol object in JavaScript represents a unique and immutable primitive value. It is often used as an identifier for object properties, ensuring that they remain unique and non-colliding.","title":"Symbol"},{"location":"Global_Objects/WeakMap/","text":"The WeakMap object in JavaScript represents a collection of key-value pairs with weakly held keys. Unlike Map , it allows garbage collection of its keys, making it ideal for scenarios where memory management is critical.","title":"WeakMap"},{"location":"Global_Objects/WeakSet/","text":"The WeakSet object in JavaScript represents a collection of weakly held objects. Unlike Set , it does not prevent garbage collection of its elements, making it suitable for managing memory-sensitive data.","title":"WeakSet"}]}